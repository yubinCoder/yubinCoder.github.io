<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript笔记(ES6-ES10)</title>
    <link href="/2022/09/02/JavaScript%E7%AC%94%E8%AE%B0-ES6-ES10/"/>
    <url>/2022/09/02/JavaScript%E7%AC%94%E8%AE%B0-ES6-ES10/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript笔记（ES6-ES10"><a href="#JavaScript笔记（ES6-ES10" class="headerlink" title="JavaScript笔记（ES6-ES10)"></a>JavaScript笔记（ES6-ES10)</h1><h2 id="1-ES6-2015"><a href="#1-ES6-2015" class="headerlink" title="1.ES6(2015)"></a>1.ES6(2015)</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> 声明的全局变量不是不是全局对象的属性<br>不可以通过 <span class="hljs-variable language_">window</span>.变量名 的方式访问这些变量，而 <span class="hljs-keyword">var</span> 声明的全局变量是 <span class="hljs-variable language_">window</span> 的属性，是可以通过 <span class="hljs-variable language_">window</span>.变量名 的方式访的。<br><span class="hljs-keyword">let</span>声明的变量具有块级作用域<br><span class="hljs-keyword">let</span>变量不会进行变量提升，重定义<span class="hljs-keyword">let</span>变量会抛出错误<br></code></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JS">数组遍历方法：<br>+ <span class="hljs-keyword">for</span>循环<br>+ <span class="hljs-title class_">Arr</span>.<span class="hljs-title function_">forEach</span>(callback):不支持<span class="hljs-keyword">break</span> <span class="hljs-keyword">continue</span><br>+ <span class="hljs-title class_">Arr</span>.<span class="hljs-title function_">every</span>(callback): 循环是否进行取决于返回值，默认返回值为<span class="hljs-literal">false</span>，也就是执行一次，也不直接支持<span class="hljs-keyword">break</span>/<span class="hljs-keyword">continue</span>，可以通过<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>来在<span class="hljs-keyword">if</span>语句中跳过或停止<br>+ <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> obj <span class="hljs-keyword">in</span> object) &#123;....&#125;  遍历对象中的全部元素  数组也是对象的一种 <br> <span class="hljs-comment">//arr=[1,2,3]  arr.a=8,for in 去遍历arr对象的话会得到1 2 3 8</span><br>+ <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> <span class="hljs-title class_">Arr</span>) &#123;....&#125;    遍历纯数组的时候  index是个字符串 不是数字型，   对应的值要用<span class="hljs-title class_">Arr</span>[index]获取<br>  index= = = <span class="hljs-number">1</span> 会<span class="hljs-literal">false</span>；index= = <span class="hljs-number">1</span>则<span class="hljs-literal">true</span>；index*<span class="hljs-number">1</span> = = = <span class="hljs-number">5</span><br>+ <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">of</span> <span class="hljs-title class_">Arr</span>) &#123;....&#125;    <br><br><span class="hljs-comment">//伪数组</span><br>具有索引及对应的值；具有length<br><br><span class="hljs-comment">//伪数组转换为数组</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arrayLike,mapFn,thisArg)<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123;<span class="hljs-attr">length</span>:<span class="hljs-number">5</span>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;rerurn <span class="hljs-number">1</span>&#125;)   <span class="hljs-comment">//初始化并赋值数组[1,1,1,1,1]</span><br><br><span class="hljs-comment">//生成新数组</span><br><span class="hljs-keyword">let</span> arr1=<span class="hljs-title class_">Array</span>（<span class="hljs-number">5</span>）   <span class="hljs-keyword">let</span> arr2[]    <span class="hljs-keyword">let</span> arr3= <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)<br><br>+ <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">fill</span>(value.<span class="hljs-property">start</span>,end)<br><span class="hljs-keyword">let</span> arr4=<span class="hljs-title class_">Array</span>（<span class="hljs-number">5</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">7</span>)    <span class="hljs-comment">//[7,7,7,7,7]</span><br><span class="hljs-keyword">let</span> arr5=arr4.<span class="hljs-title function_">fill</span>(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)    <span class="hljs-comment">//[7,7,6,6,7]</span><br><span class="hljs-keyword">let</span> array6 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>)   <span class="hljs-comment">//[1,3,5,7,9]</span><br><br><span class="hljs-comment">//查找数组元素</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property">filter</span>（ callback ）   返回符合条件的数组元素的一个新数组 对原数组不修改  callback中<span class="hljs-keyword">return</span>为<span class="hljs-literal">true</span>即为符合条件<br><span class="hljs-title class_">Array</span>.<span class="hljs-property">find</span>（ callback ）   返回符合条件的第一个数组元素的值 对原数组不修改  <br><span class="hljs-title class_">Array</span>.<span class="hljs-property">findIndex</span>（ callback ）   返回符合条件的第一个数组元素的索引 对原数组不修改  <br><span class="hljs-title class_">Array</span>.<span class="hljs-property">sort</span>（ callback ）   对数组元素进行排序 对原数字进修修改<br><br></code></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">------<span class="hljs-keyword">for</span> <span class="hljs-keyword">in</span><br>    <br><span class="hljs-comment">//for in 循环数组</span><br>    <span class="hljs-keyword">var</span> obj = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">85</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key); &#125;<span class="hljs-comment">//key的值即为索引值</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[key]);<span class="hljs-comment">//obj[key]的值为索引对应的内部值</span><br><span class="hljs-comment">//for in   循环对象</span><br><br> <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&quot; = &quot;</span> + obj[key]);<br>  &#125;<br><span class="hljs-comment">//输出为a=1;b=2;c=3</span><br><br><span class="hljs-comment">//foreach 循环数组</span><br> <span class="hljs-keyword">let</span> list=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value,index,arr</span>)=&gt;</span>&#123;    <br>    <span class="hljs-comment">//每次循环的每一个元素，当前元素索引，数组本身</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value,index,arr);<br>&#125;)<br><br><span class="hljs-comment">//for of循环</span><br><span class="hljs-keyword">var</span> obj = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">85</span>]<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> value <span class="hljs-keyword">of</span> obj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);&#125;<br> <span class="hljs-comment">//输出1,5,2,3,85 </span><br><span class="hljs-comment">//通过这种方式得到的value是值而不是索引值</span><br>注：其实<span class="hljs-keyword">for</span> <span class="hljs-keyword">of</span>它的本质是迭代器，不可以在没有symbol.<span class="hljs-property">iterator</span> 这个属性的对象上使用，比如对象<br></code></pre></td></tr></table></figure><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//-----------------------------------ES5----------------------------------------</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Animal</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">type</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = type<br>    &#125;<br>    <span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">walk</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`I am walking`</span>)<br>    &#125;<br>    <span class="hljs-keyword">let</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;dog&#x27;</span>)<br>    <span class="hljs-keyword">let</span> monkey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;monkey&#x27;</span>)<br><br><span class="hljs-comment">//类的方法继承--ES5</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Dog</span>  = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//初始化父类的构造函数</span><br>    <span class="hljs-title class_">Animal</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-string">&#x27;dog&#x27;</span>)<span class="hljs-comment">//改变this的指针指向为dog的实例对象</span><br>&#125;<br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><span class="hljs-comment">//引用类型  这样子可以访问到父类的方法</span><br><br><br><br><span class="hljs-comment">//-----------------------------------ES6----------------------------------------</span><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>        <span class="hljs-title function_">constructor</span> (type) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = type<br>        &#125;<br>        walk () &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`I am walking`</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;dog&#x27;</span>)<br>    <span class="hljs-keyword">let</span> monkey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;monkey&#x27;</span>)<br><br><br><span class="hljs-comment">//类的方法继承--ES6</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>      <span class="hljs-comment">// 显式 需要新增</span><br>      <span class="hljs-title function_">constructor</span> (type) &#123;<br>        <span class="hljs-variable language_">super</span>(type)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">2</span><br>      &#125;<br>    <span class="hljs-comment">//隐式即不需要新增</span><br>    <span class="hljs-comment">//默认执行  constructor (type) &#123; super(type)&#125;</span><br>     <br><br><br>属性<br><span class="hljs-comment">//类的实例对象可以访问到类的原型链上的方法</span><br><span class="hljs-comment">//类的静态方法只能通过属性调用</span><br><span class="hljs-comment">//getter  setter</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-keyword">class</span>类的继承<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span>&#123;<br>            <span class="hljs-comment">//构造方法</span><br>            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price</span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br>            &#125;<br>            <span class="hljs-comment">//父类的成员属性</span><br>            <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我可以打电话!!&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Phone</span> &#123;<br>            <span class="hljs-comment">//构造方法</span><br>            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price, color, size</span>)&#123;<br>                <span class="hljs-variable language_">super</span>(brand, price);<span class="hljs-comment">// Phone.call(this, brand, price)</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>            &#125;<br><br>            <span class="hljs-title function_">photo</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;拍照&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-title function_">playGame</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;玩游戏&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我可以进行视频通话&#x27;</span>);  <span class="hljs-comment">//子类对父类方法的重写</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> xiaomi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartPhone</span>(<span class="hljs-string">&#x27;小米&#x27;</span>,<span class="hljs-number">799</span>,<span class="hljs-string">&#x27;黑色&#x27;</span>,<span class="hljs-string">&#x27;4.7inch&#x27;</span>);<br>        <span class="hljs-comment">// console.log(xiaomi);</span><br>        xiaomi.<span class="hljs-title function_">call</span>();   <span class="hljs-comment">//&#x27;我可以进行视频通话&#x27;</span><br>        xiaomi.<span class="hljs-title function_">photo</span>();<br>        xiaomi.<span class="hljs-title function_">playGame</span>();<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"> <br><br></code></pre></td></tr></table></figure><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs JS">默认值<br><span class="hljs-comment">//---------------ES5--------------</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span> (x, y, z) &#123;<br>    <span class="hljs-keyword">if</span> (y === <span class="hljs-literal">undefined</span>)<br>    y = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">if</span> (z === <span class="hljs-literal">undefined</span>)<br>    z = <span class="hljs-number">42</span>;<br>    <span class="hljs-keyword">return</span> x + y + z;<br>    &#125;;<br>    <span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>) === <span class="hljs-number">50</span>;<br><span class="hljs-comment">//---------------ES5</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span> (x, y = <span class="hljs-number">7</span>, z = <span class="hljs-number">42</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y + z<br>    &#125;<br>    <span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>) === <span class="hljs-number">50</span><br><span class="hljs-comment">//如果不想使用默认值，可以使用undefined</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span> (x, y = <span class="hljs-number">7</span>, z = <span class="hljs-number">42</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y + z<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-number">43</span>))<span class="hljs-comment">// 51</span><br><br><br>+ <span class="hljs-variable language_">arguments</span><br><span class="hljs-comment">//在函数体内，有时候需要判断函数有几个参数，一共有2个办法。在 ES5 中可以在函数体内使用 arguments 来判断。</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> (a, b = <span class="hljs-number">1</span>, c) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>)<br>    &#125;<br>    <span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<span class="hljs-comment">//2</span><br><br><span class="hljs-comment">// 然而在 ES6 中不能再使用 arguments 来判断了，但可以借助 Function.length 来判断。</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> (a, b = <span class="hljs-number">1</span>, c) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-property">length</span>)<br>    &#125;<br>    <span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<span class="hljs-comment">// 1</span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property">length</span> 结果和 <span class="hljs-variable language_">arguments</span> 的结果不同！没错，<span class="hljs-title class_">Function</span>.<span class="hljs-property">length</span> 是统计第一个默认参数前面的变量数：<br><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">不确定参数的方法 <br><br>+ <span class="hljs-title class_">Rest</span> parameter<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span> (base, ...nums) &#123;    <span class="hljs-comment">//也可以只写...nums 视开发需求而定</span><br>      <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span><br>      nums.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>        num += item * <span class="hljs-number">1</span><br>      &#125;)<br>      <span class="hljs-keyword">return</span> base * <span class="hljs-number">2</span> + num<br>    &#125;<br><br>+spread<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span> (x = <span class="hljs-number">1</span>, y = <span class="hljs-number">2</span>, z = <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-keyword">return</span> x + y + z<br>    &#125;<br>    <span class="hljs-keyword">let</span> data = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>]<br>    <span class="hljs-comment">// console.log(sum(data[0], data[1], data[2]))</span><br>    <span class="hljs-comment">// console.log(sum.apply(this, data))</span><br>    <span class="hljs-title function_">sum</span>(...data)<br></code></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs JS">在 <span class="hljs-title class_">ES6</span> 之前 <span class="hljs-title class_">Object</span> 的 key 在定义时必须是字符串，<br>如果想增加“动态”的 key，必须是先计算出 key，<br>利用 object[key] = value 的方式来修改；<br>在 <span class="hljs-title class_">ES6</span> 之后可以直接用变量或者表达式来定义 key。<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    [<span class="hljs-string">&#x27;baz&#x27;</span>+ <span class="hljs-title function_">quux</span>()]: <span class="hljs-number">42</span>   <span class="hljs-comment">//obj[&#x27;baz&#x27; + quux()] = 42</span><br>    &#125;<br>    <br>从 <span class="hljs-title class_">ES6</span> 开始对象内的方法可以简写，包括常规函数和异步函数。<br><span class="hljs-comment">//ES5 时代 Object 的属性只支持常规函数，对于异步函数是不支持的</span><br><br>+ 属性<br>   <span class="hljs-title class_">Object</span>.<span class="hljs-property">length</span>值为<span class="hljs-number">1</span>。<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>可以为所有 <span class="hljs-title class_">Object</span> 类型的对象添加属性。<br>+ 方法<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, ...sources)<br><span class="hljs-comment">//通过复制一个或多个对象来创建一个新的对象。</span><br><span class="hljs-comment">//如果目标对象与源对象具有相同的 key，则目标对象中的属性将被源对象中的属性覆盖，后面的源对象的属性将类似地覆盖前面的源对象的属性。</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(proto，<span class="hljs-title function_">propertiesObject</span>(可选))<br><span class="hljs-comment">//使用指定的原型对象和属性创建一个新对象。</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, prop, descriptor)<br><span class="hljs-comment">//给对象添加一个属性并指定该属性的配置。</span><br><span class="hljs-comment">//descriptor 要定义或修改的属性描述符。</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(obj, props)<br><span class="hljs-comment">// 给对象添加多个属性并分别指定它们的配置。</span><br><span class="hljs-comment">//对象中存在的属性描述符主要有两种：数据描述符和访问器描述符</span><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(obj, &#123;<br>          <span class="hljs-string">&#x27;property1&#x27;</span>: &#123;<br>            <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span><br>          &#125;,<br>          <span class="hljs-string">&#x27;property2&#x27;</span>: &#123;<br>            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>            <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span><br>          &#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)<br><span class="hljs-comment">//返回给定对象自身可枚举属性的[key, value]数组。//一级属性</span><br><span class="hljs-comment">//new Map() 构造函数接受一个可迭代的entries。</span><br><span class="hljs-comment">//借助Object.entries方法你可以很容易的将Object转换为Map:</span><br>    <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br>    <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj));<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map); <span class="hljs-comment">// Map &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(iterable)<br><span class="hljs-comment">// 把键值对列表转换为一个对象。</span><br><span class="hljs-comment">//iterable  类似 Array 、 Map 或者其它实现了可迭代协议的可迭代对象。</span><br>    <span class="hljs-comment">//Map 转化为 Object</span><br>        <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([ [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>], [<span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-number">42</span>] ]);<br>        <span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(map);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span><br>    <span class="hljs-comment">//Array 转化为 Object</span><br>        <span class="hljs-keyword">const</span> arr = [ [<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>], [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], [<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>] ];<br>        <span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(arr);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123; 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; &#125; </span><br><br><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj)<br><span class="hljs-comment">//冻结对象：其他代码不能删除或更改任何属性。</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(obj, prop)<br><span class="hljs-comment">//返回对象指定的属性配置。如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。</span><br><span class="hljs-comment">//属性配置  value/writeable/get/set/configurable</span><br><span class="hljs-comment">//Object.getOwnPropertyDescriptors(obj) 方法用来获取一个对象的所有自身属性的描述符。</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj)<br><span class="hljs-comment">//返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj)<br><span class="hljs-comment">//返回一个数组，它包含了指定对象自身所有的符号属性。</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(object)<br><span class="hljs-comment">//返回指定对象的原型对象。</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>()比较两个值是否相同。所有 <span class="hljs-title class_">NaN</span> 值都相等（这与==和===不同）。<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>()判断对象是否可扩展。<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>()判断对象是否已经冻结。<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isSealed</span>()判断对象是否已经密封。<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>()返回一个包含所有给定对象自身可枚举属性名称的数组。<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>()防止对象的任何扩展。<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">seal</span>()防止其他代码删除对象的属性。<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>()设置对象的原型（即内部[[<span class="hljs-title class_">Prototype</span>]]属性）。<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>()返回给定对象自身可枚举值的数组。<br><br><br>+descriptor<br><span class="hljs-attr">configurable</span>:<span class="hljs-literal">false</span><br><span class="hljs-comment">//true 只有该属性描述符的类型可以被改变并且该属性可以从对应对象中删除。 默认为 false</span><br><span class="hljs-attr">enumerable</span>:<span class="hljs-literal">false</span><br><span class="hljs-comment">//true 只有在枚举相应对象上的属性时该属性显现。 默认为 false</span><br><span class="hljs-attr">value</span>:<span class="hljs-literal">undefined</span><br><span class="hljs-comment">//与属性关联的值。可以是任何有效的 JavaScript 值（数字，对象，函数等）。 默认为 undefined.</span><br><span class="hljs-attr">writable</span>:<span class="hljs-literal">false</span><br><span class="hljs-comment">//true只有与该属性相关联的值被assignment operator (en-US)改变时。 默认为 false</span><br><span class="hljs-attr">get</span>:<span class="hljs-literal">undefined</span><br><span class="hljs-comment">//作为该属性的 getter 函数，如果没有 getter 则为undefined。函数返回值将被用作属性的值。 默认为 undefined</span><br><span class="hljs-attr">set</span>:<span class="hljs-literal">undefined</span><br><span class="hljs-comment">//作为属性的 setter 函数，如果没有 setter 则为undefined。函数将仅接受参数赋值给该属性的新值。 默认为 undefined</span><br></code></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs JS">在 <span class="hljs-title class_">JavaScript</span> 里通常使用 <span class="hljs-title class_">Array</span> 或 <span class="hljs-title class_">Object</span> 来存储数据。<br>但是在频繁操作数据的过程中查找或者统计并需要手动来实现，并不能简单的直接使用。<br>比如如何保证 <span class="hljs-title class_">Array</span> 是去重的，如何统计 <span class="hljs-title class_">Object</span> 的数据总数等，必须自己去手动实现类似的需求，不是很方便。<br>在 <span class="hljs-title class_">ES6</span> 中为了解决上述痛点，新增了数据结构 <span class="hljs-title class_">Set</span> 和 <span class="hljs-title class_">Map</span>，它们分别对应传统数据结构的“集合”和“字典”。<br><br><span class="hljs-title class_">Set</span> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。<br><span class="hljs-title class_">Set</span>对象是值的集合，你可以按照插入的顺序迭代它的元素。<span class="hljs-title class_">Set</span> 中的元素只会出现一次，即 <span class="hljs-title class_">Set</span> 中的元素是唯一的。<br><br><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>（）    <span class="hljs-comment">//set对象属于可遍历对象  有索引跟值就可以  数组跟对象属于常规的可遍历对象</span><br> s.<span class="hljs-property">size</span>     <span class="hljs-comment">//set内部数据的 长度</span><br> s.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>   <span class="hljs-comment">//属性表示Set构造函数的原型对象。包含 Writable/Enumerabl/Configurable</span><br> s.<span class="hljs-property">add</span>（<span class="hljs-string">&quot;qwe&quot;</span>）.<span class="hljs-property">add</span>（<span class="hljs-string">&quot;sda&quot;</span>）.<span class="hljs-property">add</span>（<span class="hljs-string">&quot;qwe&quot;</span>）   <span class="hljs-comment">//set会默认过滤掉重复数据</span><br> s.<span class="hljs-property">delete</span>（<span class="hljs-string">&quot;qwe&quot;</span>）  <span class="hljs-comment">//查找并删除</span><br> s.<span class="hljs-property">clear</span>（）  <span class="hljs-comment">//清空set</span><br> s.<span class="hljs-property">has</span>（<span class="hljs-string">&quot;sda&quot;</span>）  <span class="hljs-comment">//查找是否存在该属性 返回布尔值</span><br> s.<span class="hljs-property">keys</span>（）<br> s.<span class="hljs-property">values</span>（）<br> s.<span class="hljs-property">entries</span>（）  <span class="hljs-comment">//返回一个新的Iterator对象，包含[value, value]给定的每个元素的数组Set，按照插入顺序。</span><br><br>+创建set<br><span class="hljs-keyword">let</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>    mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// Set [ 1 ]</span><br>    mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// Set [ 1, 5 ]</span><br>    mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// Set [ 1, 5 ]</span><br>    mySet.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;some text&quot;</span>); <span class="hljs-comment">// Set [ 1, 5, &quot;some text&quot; ]</span><br>+迭代set<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> mySet.<span class="hljs-title function_">entries</span>()) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> mySet.<span class="hljs-title function_">keys</span>()) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>+<span class="hljs-title class_">Array</span> 相关<br>    <span class="hljs-keyword">let</span> myArray = [<span class="hljs-string">&quot;value1&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>];<br>    <span class="hljs-comment">// 用 Set 构造器将 Array 转换为 Set</span><br>    <span class="hljs-keyword">let</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(myArray);<br>    mySet.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;value1&quot;</span>); <span class="hljs-comment">// returns true</span><br>    <span class="hljs-comment">// 用...(展开操作符) 操作符将 Set 转换为 Array</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([...mySet]); <span class="hljs-comment">// 与 myArray 完全一致</span><br>+数组去重<br>    <span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">32</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(numbers)])<br>    <span class="hljs-comment">// [2, 3, 4, 5, 6, 7, 32]</span><br>+<span class="hljs-title class_">String</span> 相关<br>    <span class="hljs-keyword">let</span> text = <span class="hljs-string">&#x27;India&#x27;</span>;<br>    <span class="hljs-keyword">let</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(text);  <span class="hljs-comment">// Set &#123;&#x27;I&#x27;, &#x27;n&#x27;, &#x27;d&#x27;, &#x27;i&#x27;, &#x27;a&#x27;&#125;</span><br>    mySet.<span class="hljs-property">size</span>;  <span class="hljs-comment">// 5</span><br>    <span class="hljs-comment">// 大小写敏感 &amp; duplicate ommision</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-string">&quot;Firefox&quot;</span>)  <span class="hljs-comment">// Set(7) [ &quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;f&quot;, &quot;o&quot;, &quot;x&quot; ]</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-string">&quot;firefox&quot;</span>)  <span class="hljs-comment">// Set(6) [ &quot;f&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;o&quot;, &quot;x&quot; ]</span><br> <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];<br><span class="hljs-comment">//1. 数组去重</span><br><span class="hljs-comment">// let result = [...new Set(arr)];</span><br><span class="hljs-comment">// console.log(result);</span><br><span class="hljs-comment">//2. 交集</span><br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-comment">// let result = [...new Set(arr)].filter(item =&gt; &#123;</span><br><span class="hljs-comment">//     let s2 = new Set(arr2);// 4 5 6</span><br><span class="hljs-comment">//     if(s2.has(item))&#123;</span><br><span class="hljs-comment">//         return true;</span><br><span class="hljs-comment">//     &#125;else&#123;</span><br><span class="hljs-comment">//         return false;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><span class="hljs-comment">// let result = [...new Set(arr)].filter(item =&gt; new Set(arr2).has(item));</span><br><span class="hljs-comment">// console.log(result);</span><br><br><span class="hljs-comment">//3. 并集</span><br><span class="hljs-comment">// let union = [...new Set([...arr, ...arr2])];</span><br><span class="hljs-comment">// console.log(union);</span><br><br><span class="hljs-comment">//4. 差集</span><br><span class="hljs-keyword">let</span> diff = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> !(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr2).<span class="hljs-title function_">has</span>(item)));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diff);<br><br></code></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JS">对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([iterable])<br><span class="hljs-title class_">Iterable</span> 可以是一个数组或者其他 iterable 对象，其元素或为键值对，或为两个元素的数组。 每个键值对都会添加到新的 <span class="hljs-title class_">Map</span>。<span class="hljs-literal">null</span>会被当做 <span class="hljs-literal">undefined</span>。<br>一个<span class="hljs-title class_">Map</span>对象以插入顺序迭代其元素 — 一个  <br><span class="hljs-keyword">for</span>...<span class="hljs-keyword">of</span> 循环为每次迭代返回一个[key，value]数组。<br>应该注意的是,<span class="hljs-title class_">Map</span>是一个对象的映射，将只映射到对象的插入顺序 - 这是随机的，而不是依照次序的。<br><br>map.<span class="hljs-property">size</span>    <span class="hljs-comment">//size 可访问属性返回 Map对象的元素数量.</span><br>map.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>   <span class="hljs-comment">//属性表示Map构造函数的原型对象。包含 Writable/Enumerabl/Configurable</span><br><br>map.<span class="hljs-title function_">clear</span>()  <span class="hljs-comment">//clear()方法会移除Map对象中的所有元素。</span><br>map.<span class="hljs-title function_">delete</span>()  <span class="hljs-comment">//delete()方法用于移除Map对象中指定的元素。</span><br><br><br>map.<span class="hljs-title function_">set</span>()  <span class="hljs-comment">//set() 方法为Map对象添加一个指定键（key）和值（value）的新元素。</span><br>map.<span class="hljs-title function_">get</span>()  <span class="hljs-comment">//get() 方法用来获取一个 Map?对象中指定的元素。</span><br>map.<span class="hljs-title function_">delete</span>() <span class="hljs-comment">//has() 返回一个bool值，用来表明map 中是否存在指定元素.</span><br><br>map.<span class="hljs-title function_">keys</span>()  <span class="hljs-comment">//keys()返回一个新的 Iterator对象。它包含按照顺序插入Map对象中每个元素的key值。</span><br>map.<span class="hljs-property">values</span>  <span class="hljs-comment">//values() 方法返回一个新的Iterator对象。它包含按顺序插入Map对象中每个元素的value值。</span><br>map.<span class="hljs-title function_">entries</span>()  <span class="hljs-comment">//entries()方法返回一个新的包含 [key, value]的 Iterator对象，返回的迭代器的迭代顺序与 Map对象的插入顺序相同。</span><br><br>map.<span class="hljs-title function_">forEach</span>(callback[,thisArg])  <span class="hljs-comment">//forEach 方法将对Map中真实存在的每一个元素执行一次?参数中提供的回调函数，它不会对任何已经被删除的元素执行调用。然而，它还会对键存在而值为 undefined 的元素执行调用。</span><br><br><br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;value-4&#x27;</span>)<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;value-3&#x27;</span>)<br>map.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value, key)<br>&#125;)  <span class="hljs-comment">//输入 2  10； value-4 3；value-3 1</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, value)<br>&#125;  <span class="hljs-comment">//输出  10 2 ；3 value-4；1 value-3</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">使用 <span class="hljs-keyword">for</span>..<span class="hljs-property">of</span> 方法迭代 <span class="hljs-title class_">Map</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> myMap) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&#x27; = &#x27;</span> + value)<br>    &#125;<br>使用 <span class="hljs-title function_">forEach</span>() 方法迭代 <span class="hljs-title class_">Map</span><br>myMap.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, key</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&#x27; = &#x27;</span> + value)<br>&#125;)<br><span class="hljs-title class_">Map</span>与数组的关系<br>    <span class="hljs-keyword">const</span> kvArray = [[<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>], [<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>]];<br>    <span class="hljs-comment">// 使用常规的 Map 构造函数可以将一个二维键值对数组转换成一个 Map 对象</span><br>    <span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(kvArray);<br>    myMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;key1&quot;</span>); <span class="hljs-comment">// 返回值为 &quot;value1&quot;</span><br>    <span class="hljs-comment">// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(myMap)); <span class="hljs-comment">// 输出和 kvArray 相同的数组</span><br>    <span class="hljs-comment">// 更简洁的方法来做如上同样的事情，使用展开运算符</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([...myMap]);<br>    <span class="hljs-comment">// 或者在键或者值的迭代器上使用 Array.from，进而得到只含有键或者值的数组</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(myMap.<span class="hljs-title function_">keys</span>())); <span class="hljs-comment">// 输出 [&quot;key1&quot;, &quot;key2&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="Template-literals"><a href="#Template-literals" class="headerlink" title="Template literals"></a>Template literals</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs JS">模板字面量/<span class="hljs-title class_">Template</span> literals 是允许嵌入表达式的字符串字面量。<br>模板字符串使用反引号 (<span class="hljs-string">` `</span>) 来代替普通字符串中的用双引号和单引号。<br>模板字符串可以包含特定语法($&#123;expression&#125;)的占位符。<br>占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。<br>模板字面量支持多行<br><span class="hljs-comment">//在模版字符串内使用反引号（`）时，需要在它前面加转义符（\）。</span><br><span class="hljs-string">`\``</span> === <span class="hljs-string">&#x27;`&#x27;</span>   <span class="hljs-comment">// --&gt; true</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">10</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Fifteen is <span class="hljs-subst">$&#123;a + b&#125;</span> and</span><br><span class="hljs-string">    not <span class="hljs-subst">$&#123;<span class="hljs-number">2</span> * a + b&#125;</span>.`</span>);<br>    <span class="hljs-comment">// &quot;Fifteen is 15 and</span><br>    <span class="hljs-comment">// not 20.&quot;</span><br><br>原始字符串<br>raw标记模板文字的第一个函数参数上的特殊属性允许您在输入时访问原始字符串，而不处理转义序列。<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tag</span>(<span class="hljs-params">strings, ...values</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(strings.<span class="hljs-property">raw</span>[<span class="hljs-number">0</span>]);<br>&#125;<br><br>tag<span class="hljs-string">`string text line 1 \n string text line 2`</span>;<br><span class="hljs-comment">// logs &quot;string text line 1 \n string text line 2&quot; ,</span><br><span class="hljs-comment">// including the two characters &#x27;\&#x27; and &#x27;n&#x27;</span><br><br>此外，该<span class="hljs-title class_">String</span>.<span class="hljs-title function_">raw</span>()方法存在创建原始字符串就像默认的模板函数和字符串连接会创建。<br><span class="hljs-keyword">var</span> str = <span class="hljs-title class_">String</span>.<span class="hljs-property">raw</span><span class="hljs-string">`Hi\n<span class="hljs-subst">$&#123;<span class="hljs-number">2</span>+<span class="hljs-number">3</span>&#125;</span>!`</span>;<br><span class="hljs-comment">// &quot;Hi\n5!&quot;</span><br><br>str.<span class="hljs-property">length</span>;<br><span class="hljs-comment">// 6</span><br><br>str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br><span class="hljs-comment">// &quot;H,i,\,n,5,!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Desctructuring"><a href="#Desctructuring" class="headerlink" title="Desctructuring"></a>Desctructuring</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title class_">ES6</span> 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。<br>可以从数组中提取值，按照对应位置，对变量赋值。<br>本质上属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。<br><br>+对象解构<br>es6 解构对象是 变量名必须和属性名相同 但是顺序没有要求。<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>        <span class="hljs-attr">names</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>        age : <span class="hljs-number">18</span>,<br>        sex : <span class="hljs-string">&#x27;女&#x27;</span>,<br>        data :[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<br>        say : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好我是张三&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// es5 : </span><br>    <span class="hljs-comment">// var name = obj.name;</span><br>    <span class="hljs-comment">// var age = obj.age;</span><br><br>    <span class="hljs-comment">// 1. 解构对象中的变量</span><br>    <span class="hljs-keyword">let</span> &#123;names,age,say&#125; = obj;   <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(names,age);<br>    <span class="hljs-comment">// 2. 解构对象中的方法   </span><br>    <span class="hljs-title function_">say</span>();    <br>    <span class="hljs-comment">// 3.结构对象中的数组</span><br>   <span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">data</span>:[a,b,c,d]&#125; = obj;   <br><br>解构字符串时 会将字符串当做一个数组 来取解构<br><br>通过字面量合并对象<br><span class="hljs-attr">obj1</span>:&#123;<span class="hljs-attr">key1</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">key2</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">key3</span>:<span class="hljs-number">3</span>&#125;,<br><span class="hljs-attr">obj2</span>:&#123;<span class="hljs-attr">key2</span>:<span class="hljs-number">22</span>,<span class="hljs-attr">key4</span>:<span class="hljs-number">44</span> &#125;,      <br>obj3=&#123;...obj1,...obj2&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj3)<span class="hljs-comment">//输出 &#123;key1:1, key2:22,key3:3,key4:44 &#125;, </span><br><br></code></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JS">+ 概述<br>是异步编程的一种解决方案。从语法上说，<span class="hljs-title class_">Promise</span> 是一个对象，从它可以获取异步操作的消息。<br><br>+<span class="hljs-title class_">Promise</span> 状态<br><span class="hljs-title class_">Promise</span> 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。<br><span class="hljs-title class_">Promise</span> 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）<br><br><br>+创建<span class="hljs-title class_">Promise</span>对象<br><span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-comment">// 异步处理</span><br>    <span class="hljs-comment">// 处理结束后、调用resolve 或 reject</span><br>    <span class="hljs-comment">//resolve是必须的，reject可以省略</span><br>&#125;);<br><br><br><span class="hljs-keyword">var</span> myFirstPromise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>    <span class="hljs-comment">//当异步代码执行成功时，才会调用resolve(...), 当异步代码失败时就会调用reject(...)</span><br>    <span class="hljs-comment">//在本例中，使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;成功!&quot;</span>); <span class="hljs-comment">//代码正常执行！</span><br>    &#125;, <span class="hljs-number">250</span>);<br>&#125;);<br> <br>myFirstPromise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">successMessage</span>)&#123;<br>    <span class="hljs-comment">//successMessage的值是上面调用resolve(...)方法传入的值.</span><br>    <span class="hljs-comment">//successMessage参数不一定非要是字符串类型，这里只是举个例子</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Yay! &quot;</span> + successMessage);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">then</span>  方法<br>+<span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">catch</span>  方法<br>then 方法接收两个函数作为参数，第一个参数是 <span class="hljs-title class_">Promise</span> 执行成功时的回调，第二个参数是 <span class="hljs-title class_">Promise</span> 执行失败时的回调，两个函数只会有一个被调用。通过 .<span class="hljs-property">then</span> 形式添加的回调函数，不论什么时候，都会被调用。<br>    promise.<span class="hljs-title function_">then</span>(onFulfilled, onRejected)<br><span class="hljs-comment">//promise简化了对error的处理，上面的代码我们也可以这样写：</span><br>    promise.<span class="hljs-title function_">then</span>(onFulfilled).<span class="hljs-title function_">catch</span>(onRejected)<br><br>    <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>    &#125;);<br><br>    p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>    &#125;);<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;first&#x27;</span>);<br>    <span class="hljs-comment">// first</span><br>    <span class="hljs-comment">// success</span><br><br>    <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>);<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123; <span class="hljs-comment">// 第一个then // 1</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>      <span class="hljs-keyword">return</span> value * <span class="hljs-number">2</span>;<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123; <span class="hljs-comment">// 第二个then // 2</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);    <span class="hljs-comment">//第二个then  返回值是undefined</span><br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123; <span class="hljs-comment">// 第三个then // undefined</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;resolve&#x27;</span>); <span class="hljs-comment">// 第三个then返回值是resolve</span><br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123; <span class="hljs-comment">// 第四个then // resolve</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;reject&#x27;</span>); <br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123; <span class="hljs-comment">// 第五个then //reject:reject</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;resolve:&#x27;</span> + value);<br>    &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;reject:&#x27;</span> + err);<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error));<br><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadScript</span> (src) &#123;<br>  <span class="hljs-comment">// pending,undefined</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>    script.<span class="hljs-property">src</span> = src<br>    script.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(src)<span class="hljs-comment">// fulfilled,result</span><br>    script.<span class="hljs-property">onerror</span> = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title function_">reject</span>(err)<span class="hljs-comment">// rejected,error</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">append</span>(script)<br>  &#125;)<br>&#125;<br><br>+正常写法<span class="hljs-comment">//1.js和3.js均可以正常加载 4.js加载失败</span><br>    <span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;./1.js&#x27;</span>)   <br>    <span class="hljs-comment">//正常执行 resolve(./1.js) 状态为 fulfilled</span><br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;./4.js&#x27;</span>)<br>        <span class="hljs-comment">//上一状态为 fulfilled  resolve的value为(./1.js)  </span><br>        <span class="hljs-comment">//return返回一个新的promise实例  </span><br>        <span class="hljs-comment">// loadScript(&#x27;./4.js&#x27;)无法执行  promise实例状态为rejected</span><br>      &#125;)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;./3.js&#x27;</span>)<br>        <span class="hljs-comment">//状态为rejected 无法修改 不执行这个then</span><br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>      &#125;)<br>      <span class="hljs-comment">// throw new Error</span><br>+对比分析<br>    <span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;./1.js&#x27;</span>)<br>    <span class="hljs-comment">//正常执行 resolve(./1.js) 状态为 fulfilled</span><br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>         <span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;./4.js&#x27;</span>)<br>        <span class="hljs-comment">//上一状态为 fulfilled  resolve的value为(./1.js)  </span><br>        <span class="hljs-comment">//无返回 默认返回一个空的promise  此时状态为fulfilled</span><br>        <span class="hljs-comment">//loadScript(&#x27;./4.js&#x27;)是否能执行均不会影响此时的状态</span><br>      &#125;)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>         <span class="hljs-title function_">loadScript</span>(<span class="hljs-string">&#x27;./3.js&#x27;</span>)<br>       <span class="hljs-comment">//上一状态为为fulfilled 继续执行这个then</span><br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>      &#125;)<br>      <span class="hljs-comment">// throw new Error</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-title class_">Promise</span>.<span class="hljs-property">resolve</span> 方法，<span class="hljs-title class_">Promise</span>.<span class="hljs-property">reject</span> 方法<br><br><br><span class="hljs-comment">//有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用。</span><br><span class="hljs-keyword">var</span> jsPromise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>($.<span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;/whatever.json&#x27;</span>));<br><span class="hljs-comment">//上面代码将 jQuery 生成 deferred 对象，转为一个新的 ES6 的 Promise 对象。</span><br><br><span class="hljs-comment">//如果 Promise.resolve 方法的参数，不是具有 then 方法的对象（又称 thenable 对象），则返回一个新的 Promise 对象，且它的状态为fulfilled。</span><br><span class="hljs-keyword">var</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br> <br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)<br>&#125;);<br><span class="hljs-comment">// Hello</span><br><span class="hljs-comment">//上面代码生成一个新的Promise对象的实例p，它的状态为fulfilled，所以回调函数会立即执行，Promise.resolve方法的参数就是回调函数的参数。</span><br><br><span class="hljs-comment">//如果Promise.resolve方法的参数是一个Promise对象的实例，则会被原封不动地返回。</span><br><span class="hljs-comment">//Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。Promise.reject方法的参数reason，会被传递给实例的回调函数。</span><br><br><span class="hljs-keyword">var</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>);<br> <br>p.<span class="hljs-title function_">then</span>(<span class="hljs-literal">null</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)<br>&#125;);<br><span class="hljs-comment">// 出错了</span><br><span class="hljs-comment">//上面代码生成一个Promise对象的实例，状态为rejected，回调函数会立即执行。</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> (bool) &#123;<br>  <span class="hljs-keyword">if</span> (bool) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-number">30</span>)<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;ss&#x27;</span>))<br>  &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span>方法<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span> 方法用于将多个 <span class="hljs-title class_">Promise</span> 实例，包装成一个新的 <span class="hljs-title class_">Promise</span> 实例。<br>        <span class="hljs-keyword">var</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1,p2,p3]);<br>    上面代码中，<span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span> 方法接受一个数组作为参数，p1、p2、p3 都是 <span class="hljs-title class_">Promise</span> 对象的实例。<br>    （<span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span> 方法的参数不一定是数组，但是必须具有 iterator 接口，<br>    且返回的每个成员都是 <span class="hljs-title class_">Promise</span> 实例。）<br><br>    p 的状态由 p1、p2、p3 决定，分成两种情况。<br>    （<span class="hljs-number">1</span>）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，<br>    此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。<br>    （<span class="hljs-number">2</span>）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，<br>    此时第一个被reject的实例的返回值，会传递给p的回调函数。<br><br>+<span class="hljs-title class_">Promise</span>.<span class="hljs-property">race</span>方法<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-property">race</span> 方法同样是将多个 <span class="hljs-title class_">Promise</span> 实例，包装成一个新的 <span class="hljs-title class_">Promise</span> 实例。<br><br>    <span class="hljs-keyword">var</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([p1,p2,p3]);<br>    上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。<br>    那个率先改变的<span class="hljs-title class_">Promise</span>实例的返回值，就传递给p的返回值。<br><br>    如果<span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span>方法和<span class="hljs-title class_">Promise</span>.<span class="hljs-property">race</span>方法的参数，不是<span class="hljs-title class_">Promise</span>实例，<br>就会先调用下面讲到的<span class="hljs-title class_">Promise</span>.<span class="hljs-property">resolve</span>方法，将参数转为<span class="hljs-title class_">Promise</span>实例，再进一步处理。<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">+ <span class="hljs-title class_">Promise</span> 封装ajax     <br>      <span class="hljs-comment">// 接口地址: https://api.apiopen.top/getJoke</span><br>        <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">//1. 创建对象</span><br>            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><br>            <span class="hljs-comment">//2. 初始化</span><br>            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;https://api.apiopen.top/getJ&quot;</span>);<br><br>            <span class="hljs-comment">//3. 发送</span><br>            xhr.<span class="hljs-title function_">send</span>();<br><br>            <span class="hljs-comment">//4. 绑定事件, 处理响应结果</span><br>            xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">//判断</span><br>                <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>                    <span class="hljs-comment">//判断响应状态码 200-299</span><br>                    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>                        <span class="hljs-comment">//表示成功</span><br>                        <span class="hljs-title function_">resolve</span>(xhr.<span class="hljs-property">response</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">//如果失败</span><br>                        <span class="hljs-title function_">reject</span>(xhr.<span class="hljs-property">status</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;)<br>        <br>        <span class="hljs-comment">//指定回调</span><br>        p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>        &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(reason);<br>        &#125;);<br></code></pre></td></tr></table></figure><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title class_">Reflect</span>是一个内置的对象，它提供拦截 <span class="hljs-title class_">JavaScript</span> 操作的方法。这些方法与处理器对象的方法相同。<span class="hljs-title class_">Reflect</span>不是一个函数对象，因此它是不可构造的。与大多数全局对象不同，<span class="hljs-title class_">Reflect</span>没有构造函数。你不能将其与一个<span class="hljs-keyword">new</span>运算符一起使用，或者将<span class="hljs-title class_">Reflect</span>对象作为一个函数来调用。<span class="hljs-title class_">Reflect</span>的所有属性和方法都是静态的（就像<span class="hljs-title class_">Math</span>对象）。<br><br><span class="hljs-title class_">Reflect</span>在调用的方法存在不确定性的情况下表现更好<br>在方法确定的情况下用和常规方法没有较大差别<br><br><span class="hljs-title class_">Reflect</span>对象提供以下静态函数，它们具有与处理器对象方法相同的名称。这些方法中的一些与<span class="hljs-title class_">Object</span>上的对应方法相同。<br><br>+<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(target, thisArgument, argumentsList)<br>        <span class="hljs-comment">//对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和Function.prototype.apply()功能类似。</span><br>        <span class="hljs-comment">//target目标函数。thisArgumenttarget函数调用时绑定的this对象。argumentsListtarget函数调用时传入的实参列表，该参数应该是一个类数组的对象。</span><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">floor</span>, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">1.75</span>]); <span class="hljs-comment">// 1;   </span><br>    <span class="hljs-comment">//ES5写法   Math.floor.apply（null，[1.75]）</span><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">String</span>.<span class="hljs-property">fromCharCode</span>, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>]);<span class="hljs-comment">// &quot;hello&quot;   </span><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">exec</span>, <span class="hljs-regexp">/ab/</span>, [<span class="hljs-string">&#x27;confabulation&#x27;</span>]).<span class="hljs-property">index</span>;<span class="hljs-comment">// 4</span><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-property">charAt</span>, <span class="hljs-string">&#x27;ponies&#x27;</span>, [<span class="hljs-number">3</span>]);<span class="hljs-comment">// &quot;i&quot;</span><br><br>+ <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">construct</span>(target, argumentsList[, newTarget])<br>    <span class="hljs-comment">//target被运行的目标函数argumentsList调用构造函数的数组或者伪数组newTarget可选该参数为构造函数， 参考new.target操作符，如果没有newTarget参数， 默认和target一样</span><br>    <span class="hljs-comment">//对构造函数进行new操作，相当于执行new target(...args)。</span><br>    <span class="hljs-keyword">var</span> d = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">construct</span>(<span class="hljs-title class_">Date</span>, [<span class="hljs-number">1776</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]);<br><br>+ <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineProperty</span>(target, propertyKey, attributes)<br>    <span class="hljs-comment">//和Object.defineProperty()类似。唯一不同是返回 Boolean值。</span><br>    <span class="hljs-comment">//target目标对象。propertyKey要定义或修改的属性的名称。attributes要定义或修改的属性的描述。</span><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;x&#x27;</span>, &#123;<span class="hljs-attr">value</span>: <span class="hljs-number">7</span>&#125;); <span class="hljs-comment">// true</span><br><br>+<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target, propertyKey)<br>    <span class="hljs-comment">//Reflect.deleteProperty()作为函数的delete操作符，相当于执行delete target[name]。唯一不同是返回 Boolean值。</span><br><br>+ <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">enumerate</span>()<br>    <span class="hljs-comment">//该方法会返回一个包含有目标对象身上所有可枚举的自身字符串属性以及继承字符串属性的迭代器，for...in操作遍历到的正是这些属性。</span><br><br>+ <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, propertyKey[, receiver])<br>    <span class="hljs-comment">//获取对象身上某个属性的值，。就像从对象 (target[propertyKey]) 中获取属性，但它是作为一个函数执行的。</span><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>([<span class="hljs-string">&#x27;zero&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>], <span class="hljs-number">1</span>); <span class="hljs-comment">// &quot;one&quot;</span><br>    <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span> &#125;;<br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(obj, <span class="hljs-string">&#x27;x&#x27;</span>); <span class="hljs-comment">// 1</span><br>+ <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, propertyKey, value[, receiver])<br>    <span class="hljs-comment">//Reflect.set 方法允许你在对象上设置属性。它的作用是给属性赋值并且就像 property accessor语法一样，但是它是以函数的方式。</span><br>    <span class="hljs-comment">//target设置属性的目标对象。propertyKey设置的属性的名称。value设置的值。receiver如果遇到 setter，this 将提供给目标调用。返回一个boolean值</span><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(obj, <span class="hljs-string">&#x27;prop&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(target, propertyKey)<br><span class="hljs-comment">//类似于Object.getOwnPropertyDescriptor()。</span><br><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getPrototypeOf</span>(target)<br><span class="hljs-comment">//类似于Object.getPrototypeOf()。</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getPrototypeOf</span>(&#123;&#125;); <span class="hljs-comment">// Object.prototype</span><br><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(target, propertyKey)<br><span class="hljs-comment">//判断一个对象是否存在某个属性，和in运算符的功能完全相同。</span><br><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">isExtensible</span>(target)<br><span class="hljs-comment">//类似于Object.isExtensible().</span><br><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>()<br><span class="hljs-comment">//返回一个包含所有自身属性（不包含继承属性）的数组。</span><br><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">preventExtensions</span>()<br><span class="hljs-comment">//类似于Object.preventExtensions()。返回一个Boolean。Reflect.set()将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。</span><br><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">setPrototypeOf</span>()<br><span class="hljs-comment">//类似于Object.setPrototypeOf()。</span><br></code></pre></td></tr></table></figure><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler)<br><br>处理器对象用来自定义代理对象的各种可代理操作。<br>一共有 <span class="hljs-number">13</span> 种可代理操作，每种操作的代号（属性名/方法名）和触发这种操作的方式列举如下。注意，如果没有定义某种操作，那么这种操作会被转发到目标对象身上。<br><br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, &#123;<br>  <span class="hljs-attr">apply</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, thisArg, argumentsList</span>) &#123;...&#125;;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, property, receiver</span>) &#123;...&#125;;<br>  <br>&#125;);<br>                                                    <br>                                                   <br><span class="hljs-number">13</span>种拦截方法如下（以下引用摘自阮一峰<span class="hljs-title class_">ES6</span>入门）：<br><br>    <span class="hljs-number">1</span>、<span class="hljs-title function_">get</span>(target, propKey, receiver)：<br>    拦截对象属性的读取，比如proxy.<span class="hljs-property">foo</span>和proxy[‘foo’]。<br><br>    <span class="hljs-number">2</span>、<span class="hljs-title function_">set</span>(target, propKey, value, receiver)： 拦截对象属性的设置，比如proxy.<span class="hljs-property">foo</span> =<br>    v或proxy[‘foo’] = v，返回一个布尔值。<br><br>    <span class="hljs-number">3</span>、<span class="hljs-title function_">has</span>(target, propKey)：<br>    拦截propKey <span class="hljs-keyword">in</span> proxy的操作，返回一个布尔值。<br><br>    <span class="hljs-number">4</span>、<span class="hljs-title function_">deleteProperty</span>(target, propKey)：<br>    拦截<span class="hljs-keyword">delete</span> proxy[propKey]的操作，返回一个布尔值。<br><br>    <span class="hljs-number">5</span>、<span class="hljs-title function_">ownKeys</span>(target)：<br>    拦截<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(proxy)、<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(proxy)、<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(proxy)、<span class="hljs-keyword">for</span>…<span class="hljs-keyword">in</span>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，<br>    而<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>()的返回结果仅包括目标对象自身的可遍历属性。<br><br>    <span class="hljs-number">6</span>、<span class="hljs-title function_">getOwnPropertyDescriptor</span>(target, propKey)：<br>    拦截<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(proxy, propKey)，返回属性的描述对象。<br><br>    <span class="hljs-number">7</span>、<span class="hljs-title function_">defineProperty</span>(target, propKey, propDesc)：<br>    拦截<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(proxy, propKey,<br>    propDesc）、<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(proxy, propDescs)，返回一个布尔值。<br><br>    <span class="hljs-number">8</span>、<span class="hljs-title function_">preventExtensions</span>(target)：<br>    拦截<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">preventExtensions</span>(proxy)，返回一个布尔值。<br><br>    <span class="hljs-number">9</span>、<span class="hljs-title function_">getPrototypeOf</span>(target)：<br>    拦截<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(proxy)，返回一个对象。<br><br>    <span class="hljs-number">10</span>、<span class="hljs-title function_">isExtensible</span>(target)：<br>    拦截<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(proxy)，返回一个布尔值。<br><br>    <span class="hljs-number">11</span>、<span class="hljs-title function_">setPrototypeOf</span>(target, proto)：<br>    拦截<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(proxy,<br>    proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。<br><br>    <span class="hljs-number">12</span>、<span class="hljs-title function_">apply</span>(target, object, args)：<br>    拦截<span class="hljs-title class_">Proxy</span> 实例作为函数调用的操作，比如<span class="hljs-title function_">proxy</span>(…args)、proxy.<span class="hljs-title function_">call</span>(object,<br>    …args)、proxy.<span class="hljs-title function_">apply</span>(…)。<br><br>    <span class="hljs-number">13</span>、<span class="hljs-title function_">construct</span>(target, args)：<br>    拦截 <span class="hljs-title class_">Proxy</span> 实例作为构造函数调用的操作，比如<span class="hljs-keyword">new</span> <span class="hljs-title function_">proxy</span>(…args)。<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">revocable</span>(target, handler);  方法可以用来创建一个可撤销的代理对象。     <br><br><span class="hljs-keyword">var</span> revocable = <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">revocable</span>(&#123;&#125;, &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, name</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[[&quot;</span> + name + <span class="hljs-string">&quot;]]&quot;</span>;<br>  &#125;<br>&#125;);<br><span class="hljs-keyword">var</span> proxy = revocable.<span class="hljs-property">proxy</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">foo</span>); <span class="hljs-comment">// &quot;[[foo]]&quot;</span><br><br>revocable.<span class="hljs-title function_">revoke</span>();    <span class="hljs-comment">//撤销代理</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">foo</span>); <span class="hljs-comment">// TypeError is thrown</span><br>proxy.<span class="hljs-property">foo</span> = <span class="hljs-number">1</span>           <span class="hljs-comment">// TypeError again</span><br><span class="hljs-keyword">delete</span> proxy.<span class="hljs-property">foo</span>;       <span class="hljs-comment">// still TypeError</span><br><span class="hljs-keyword">typeof</span> proxy            <span class="hljs-comment">// &quot;object&quot;, typeof doesn&#x27;t trigger any trap</span><br></code></pre></td></tr></table></figure><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title class_">Generator</span>对象由一个生成器函数获得，它符合iterable协议和iterator协议。<br><br><span class="hljs-title class_">Generator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">next</span>()返回一个由<span class="hljs-keyword">yield</span>表达式生成的值。<br><span class="hljs-title class_">Generator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-keyword">return</span>()返回给定的值并结束生成器。<br><span class="hljs-title class_">Generator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-keyword">throw</span>()向生成器抛出一个错误。<br><br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;one&quot;</span>);<br> <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;two&quot;</span>);<br> <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;2&#x27;</span>; <br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;three&quot;</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;3&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f.<span class="hljs-title function_">next</span>());<span class="hljs-comment">//  先执行f.next()，输出one</span><br><span class="hljs-comment">// 此时f.next()返回的是&#123;value: &quot;1&quot;, done: false&#125; 通过控制台输出</span><br> <br>f.<span class="hljs-title function_">next</span>();<span class="hljs-comment">// two</span><br><span class="hljs-comment">// 此时f.next()返回的是&#123;value: &quot;2&quot;, done: false&#125;</span><br> <br>f.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">//three</span><br><span class="hljs-comment">// 此时f.next()返回的是&#123;value: &quot;3&quot;, done: true&#125;</span><br> <br>f.<span class="hljs-title function_">next</span>();  <span class="hljs-comment">//无输出</span><br><span class="hljs-comment">// 此时f.next()返回的是 &#123;value: undefined, done: true&#125;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js">+ next 方法<br>    一般情况下，next 方法不传入参数的时候，<span class="hljs-keyword">yield</span> 表达式的返回值是 <span class="hljs-literal">undefined</span> 。<br>    <span class="hljs-keyword">yield</span>后面跟的表达式会将该表达式的值传给next（）.<span class="hljs-property">value</span>，<br>    比如 <span class="hljs-keyword">const</span> a =<span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;1&#x27;</span> 是拿不到值的 只会输出<span class="hljs-literal">undefined</span><br>    当 next 传入参数的时候，该参数会作为上一步<span class="hljs-keyword">yield</span>的返回值。<br>    <br>    除了使用 next ，还可以使用 <span class="hljs-keyword">for</span>... <span class="hljs-keyword">of</span> 循环遍历 <span class="hljs-title class_">Generator</span> 函数生产的 <span class="hljs-title class_">Iterator</span> 对象。<br>    <br>    <span class="hljs-keyword">function</span>* <span class="hljs-title function_">sendParameter</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start&quot;</span>);<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;2&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;one:&quot;</span> + x);<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;3&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;two:&quot;</span> + y);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;total:&quot;</span> + (x + y));<br>&#125;<br><br>   next不传参<br>        <span class="hljs-keyword">var</span> sendp1 = <span class="hljs-title function_">sendParameter</span>();<br>        sendp1.<span class="hljs-title function_">next</span>();<br>        <span class="hljs-comment">// start</span><br>        <span class="hljs-comment">// &#123;value: &quot;2&quot;, done: false&#125;</span><br>        sendp1.<span class="hljs-title function_">next</span>();<br>        <span class="hljs-comment">// one:undefined</span><br>        <span class="hljs-comment">// &#123;value: &quot;3&quot;, done: false&#125;</span><br>        sendp1.<span class="hljs-title function_">next</span>();<br>        <span class="hljs-comment">// two:undefined</span><br>        <span class="hljs-comment">// total:NaN</span><br>        <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br><br>    next传参<br>        <span class="hljs-keyword">var</span> sendp2 = <span class="hljs-title function_">sendParameter</span>();<br>        sendp2.<span class="hljs-title function_">next</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// start</span><br>        <span class="hljs-comment">// &#123;value: &quot;2&quot;, done: false&#125;</span><br>        sendp2.<span class="hljs-title function_">next</span>(<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">// one:20</span><br>        <span class="hljs-comment">// &#123;value: &quot;3&quot;, done: false&#125;</span><br>        sendp2.<span class="hljs-title function_">next</span>(<span class="hljs-number">30</span>);<br>        <span class="hljs-comment">// two:30</span><br>        <span class="hljs-comment">// total:50</span><br>        <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js">+ <span class="hljs-keyword">return</span> 方法<br><br>    <span class="hljs-keyword">return</span> 方法返回给定值，并结束遍历 <span class="hljs-title class_">Generator</span> 函数。<br>    <span class="hljs-keyword">return</span> 方法提供参数时，返回该参数；不提供参数时，返回 <span class="hljs-literal">undefined</span> 。<br><br>        <span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-keyword">var</span> f = <span class="hljs-title function_">foo</span>();<br>        f.<span class="hljs-title function_">next</span>();<br>        <span class="hljs-comment">// &#123;value: 1, done: false&#125;</span><br>        f.<span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br>        <span class="hljs-comment">// &#123;value: &quot;foo&quot;, done: true&#125;</span><br>        f.<span class="hljs-title function_">next</span>();<br>        <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br><br>+ <span class="hljs-keyword">throw</span> 方法<br>    <span class="hljs-keyword">throw</span> 方法可以再 <span class="hljs-title class_">Generator</span> 函数体外面抛出异常，再函数体内部捕获。<br>        <span class="hljs-keyword">var</span> g = <span class="hljs-keyword">function</span>* () &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">yield</span>;<br>          &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;catch inner&#x27;</span>, e);<br>          &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">var</span> i = <span class="hljs-title function_">g</span>();<br>        i.<span class="hljs-title function_">next</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>          i.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>          i.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;catch outside&#x27;</span>, e);<br>        &#125;<br>        <span class="hljs-comment">// catch inner a</span><br>        <span class="hljs-comment">// catch outside b</span><br><span class="hljs-comment">//遍历器对象抛出了两个错误，第一个被 Generator 函数内部捕获，</span><br><span class="hljs-comment">//第二个因为函数体内部的catch 函数已经执行过了，不会再捕获这个错误，所以这个错误就抛出 Generator 函数体，被函数体外的 catch 捕获。</span><br>+<span class="hljs-keyword">yield</span>* 表达式<br><br><span class="hljs-keyword">yield</span>* 表达式表示 <span class="hljs-keyword">yield</span> 返回一个遍历器对象，用于在 <span class="hljs-title class_">Generator</span> 函数内部，调用另一个 <span class="hljs-title class_">Generator</span> 函数。<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js">####################<span class="hljs-variable constant_">MDN</span>官方文档#################<br><br>+ 生成器对象是由一个 generator <span class="hljs-keyword">function</span> 返回的，并且它符合可迭代协议和迭代器协议。<br>+方法<br>    <span class="hljs-title class_">Generator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">next</span>()<br>    <span class="hljs-comment">//返回一个由 yield表达式生成的值。</span><br>    <span class="hljs-title class_">Generator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-keyword">return</span>()<br>    <span class="hljs-comment">//返回给定的值并结束生成器。</span><br>    <span class="hljs-title class_">Generator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-keyword">throw</span>()<br>    <span class="hljs-comment">//向生成器抛出一个错误。</span><br>+<span class="hljs-keyword">function</span>*<br>        会定义一个生成器函数 (generator <span class="hljs-keyword">function</span>)，它返回一个 <span class="hljs-title class_">Generator</span> 对象。生成器函数不能当构造器使用，也就是不可以用<span class="hljs-keyword">new</span>生成<br>    <span class="hljs-comment">//调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的 迭代器 （ iterator ）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现yield的位置为止，yield 后紧跟迭代器要返回的值。或者如果用的是 yield*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。</span><br><span class="hljs-comment">//next()方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 yield 表达式的返回值，done 属性为布尔类型，表示生成器后续是否还有 yield 语句，即生成器函数是否已经执行完毕并返回。</span><br><span class="hljs-comment">//调用 next()方法时，如果传入了参数，那么这个参数会传给上一条执行的 yield 语句左边的变量</span><br>    <span class="hljs-comment">//当在生成器函数中显式 return 时，会导致生成器立即变为完成状态，即调用 next() 方法返回的对象的 done 为 true。如果 return 后面跟了一个值，那么这个值会作为当前调用 next() 方法返回的 value 值。</span><br>    <span class="hljs-keyword">function</span> *<span class="hljs-title function_">createIterator</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> first = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> second = <span class="hljs-keyword">yield</span> first + <span class="hljs-number">2</span>; <span class="hljs-comment">// 4 + 2</span><br>                                  <span class="hljs-comment">// first =4 是 next(4) 将参数赋给上一条的</span><br>    <span class="hljs-keyword">yield</span> second + <span class="hljs-number">3</span>;             <span class="hljs-comment">// 5 + 3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;R&quot;</span>;<span class="hljs-comment">//显式返回处，可以观察到 done 也立即变为了 true</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;unreachable&quot;</span>;<span class="hljs-comment">// 不会被执行了</span><br>&#125;<br><br>    <span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">createIterator</span>();<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());    <span class="hljs-comment">// &quot;&#123; value: 1, done: false &#125;&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>(<span class="hljs-number">4</span>));   <span class="hljs-comment">// &quot;&#123; value: 6, done: false &#125;&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>(<span class="hljs-number">5</span>));   <span class="hljs-comment">// &quot;&#123; value: 8, done: false &#125;&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());    <span class="hljs-comment">// &quot;&#123; value: &quot;R&quot;, done: true &#125;&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());    <span class="hljs-comment">// &quot;&#123; value: undefined, done: true &#125;&quot;</span><br><br>+ <span class="hljs-keyword">yield</span>* 的示例<br>    <span class="hljs-keyword">function</span>* <span class="hljs-title function_">anotherGenerator</span>(<span class="hljs-params">i</span>) &#123;<br>      <span class="hljs-keyword">yield</span> i + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">yield</span> i + <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">yield</span> i + <span class="hljs-number">3</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span>* <span class="hljs-title function_">generator</span>(<span class="hljs-params">i</span>)&#123;<br>      <span class="hljs-keyword">yield</span> i;<br>      <span class="hljs-keyword">yield</span>* <span class="hljs-title function_">anotherGenerator</span>(i);<span class="hljs-comment">// 移交执行权</span><br>      <span class="hljs-keyword">yield</span> i + <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> gen = <span class="hljs-title function_">generator</span>(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 10</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 11</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 12</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 13</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 20</span><br><br>+使用迭代器遍历二维数组并转换成一维数组：<br>    <span class="hljs-keyword">function</span>* <span class="hljs-title function_">iterArr</span>(<span class="hljs-params">arr</span>) &#123;            <span class="hljs-comment">//迭代器返回一个迭代器对象</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)) &#123;         <span class="hljs-comment">// 内节点</span><br>          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>              <span class="hljs-keyword">yield</span>* <span class="hljs-title function_">iterArr</span>(arr[i]);   <span class="hljs-comment">// (*) 递归</span><br>          &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;                          <span class="hljs-comment">// 离开</span><br>          <span class="hljs-keyword">yield</span> arr;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 使用 for-of 遍历：</span><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> <span class="hljs-title function_">iterArr</span>(arr)) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);               <span class="hljs-comment">// a  b  c  d  e</span><br>    &#125;<br>    <span class="hljs-comment">// 或者直接将迭代器展开：</span><br>    <span class="hljs-keyword">var</span> arr = [ <span class="hljs-string">&#x27;a&#x27;</span>, [<span class="hljs-string">&#x27;b&#x27;</span>,[ <span class="hljs-string">&#x27;c&#x27;</span>, [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]]]];<br>    <span class="hljs-keyword">var</span> gen = <span class="hljs-title function_">iterArr</span>(arr);<br>    arr = [...gen];                        <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="Itetator"><a href="#Itetator" class="headerlink" title="Itetator"></a>Itetator</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs JS">+可迭代协议<br>可迭代协议允许 <span class="hljs-title class_">JavaScript</span> 对象定义或定制它们的迭代行为，例如，在一个 <span class="hljs-keyword">for</span>..<span class="hljs-property">of</span> 结构中，哪些值可以被遍历到。一些内置类型同时是内置可迭代对象，并且有默认的迭代行为，比如 <span class="hljs-title class_">Array</span> 或者 <span class="hljs-title class_">Map</span>，而其他内置类型则不是（比如 <span class="hljs-title class_">Object</span>)）。要成为可迭代对象， 一个对象必须实现 @@iterator 方法。这意味着对象（或者它原型链上的某个对象）必须有一个键为 @@iterator 的属性，可通过常量 <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span> 访问该属性：当一个对象需要被迭代的时候（比如被置入一个 <span class="hljs-keyword">for</span>...<span class="hljs-keyword">of</span> 循环时），首先，会不带参数调用它的 @@iterator 方法，然后使用此方法返回的迭代器获得要迭代的值。<br>    <br>+迭代器协议<br>迭代器协议定义了产生一系列值（无论是有限个还是无限个）的标准方式。当值为有限个时，所有的值都被迭代完毕后，则会返回一个默认返回值。<br>    只有实现了一个拥有以下语义（semantic）的 <span class="hljs-title function_">next</span>() 方法，一个对象才能成为迭代器：<br>    <span class="hljs-title function_">next</span>() 方法必须返回一个对象，该对象应当有两个属性： done（boolean） 和 value，如果返回了一个非对象值（比如 <span class="hljs-literal">false</span> 或 <span class="hljs-literal">undefined</span>），则会抛出一个 <span class="hljs-title class_">TypeError</span> 异常（<span class="hljs-string">&quot;iterator.next() returned a non-object value&quot;</span>）。<br>    <br>    <br>    目前所有的内置可迭代对象如下：<span class="hljs-title class_">String</span>、<span class="hljs-title class_">Array</span>、<span class="hljs-title class_">TypedArray</span>、<span class="hljs-title class_">Map</span> 和 <span class="hljs-title class_">Set</span>，它们的原型对象都实现了 @@<span class="hljs-string">``</span>iterator 方法。<br>    一些语句和表达式需要可迭代对象，比如 <span class="hljs-keyword">for</span>...<span class="hljs-keyword">of</span> 循环、展开语法、<span class="hljs-keyword">yield</span>*，和解构赋值。<br><br>+ 简单迭代器<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">makeIterator</span>(<span class="hljs-params">array</span>) &#123;<br>        <span class="hljs-keyword">let</span> nextIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> &#123;<br>           <span class="hljs-attr">next</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>               <span class="hljs-keyword">return</span> nextIndex &lt; array.<span class="hljs-property">length</span> ? &#123;<br>                   <span class="hljs-attr">value</span>: array[nextIndex++],<br>                   <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>               &#125; : &#123;<br>                   <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>               &#125;;<br>           &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> it = <span class="hljs-title function_">makeIterator</span>([<span class="hljs-string">&#x27;哟&#x27;</span>, <span class="hljs-string">&#x27;呀&#x27;</span>]);<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// &#x27;哟&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// &#x27;呀&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(it.<span class="hljs-title function_">next</span>().<span class="hljs-property">done</span>);  <span class="hljs-comment">// true</span><br><br>++ 使用生成器<br>        <span class="hljs-keyword">function</span>* <span class="hljs-title function_">makeSimpleGenerator</span>(<span class="hljs-params">array</span>) &#123;<br>        <span class="hljs-keyword">let</span> nextIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(nextIndex &lt; array.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">yield</span> array[nextIndex++];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> gen = <span class="hljs-title function_">makeSimpleGenerator</span>([<span class="hljs-string">&#x27;哟&#x27;</span>, <span class="hljs-string">&#x27;呀&#x27;</span>]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// &#x27;哟&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// &#x27;呀&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">done</span>);  <span class="hljs-comment">// true</span><br><br><br>    <span class="hljs-keyword">function</span>* <span class="hljs-title function_">idMaker</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">yield</span> index++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> gen = <span class="hljs-title function_">idMaker</span>();<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 0</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 1</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>); <span class="hljs-comment">// 2</span><br><span class="hljs-comment">// ...</span><br><br>+++ <span class="hljs-keyword">class</span> 中的迭代器<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleClass</span> &#123;<br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data<br>      &#125;<br><br>      [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>        <span class="hljs-comment">// Use a new index for each iterator. This makes multiple</span><br>        <span class="hljs-comment">// iterations over the iterable safe for non-trivial cases,</span><br>        <span class="hljs-comment">// such as use of break or nested looping over the same iterable.</span><br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">length</span>) &#123;<br>              <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>[index++], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> simple = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleClass</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> val <span class="hljs-keyword">of</span> simple) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)   <span class="hljs-comment">// 1 2 3 4 5</span><br>    &#125;<br><br>++++  生成器对象既是迭代器，也是可迭代对象：<br>            <span class="hljs-keyword">let</span> aGeneratorObject = <span class="hljs-keyword">function</span>* ()&#123;<br>            <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>        &#125;();<br><br>        <span class="hljs-keyword">typeof</span> aGeneratorObject.<span class="hljs-property">next</span>;<br>        <span class="hljs-comment">// 返回&quot;function&quot;, 因为有一个 next 方法，所以这是一个迭代器</span><br><br>        <span class="hljs-keyword">typeof</span> aGeneratorObject[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>];<br>        <span class="hljs-comment">// 返回&quot;function&quot;, 因为有一个 @@iterator 方法，所以这是一个可迭代对象</span><br><br>        aGeneratorObject[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() === aGeneratorObject;<br>        <span class="hljs-comment">// 返回 true，因为 @@iterator 方法返回自身（即迭代器），所以这是一个格式良好的可迭代对象</span><br><br>        [...aGeneratorObject];<br>        <span class="hljs-comment">// 返回 [1, 2, 3]</span><br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span> <span class="hljs-keyword">in</span> aGeneratorObject)<br>        <span class="hljs-comment">// 返回 true，因为 @@iterator 方法是 aGeneratorObject 的一个属性</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> authors = &#123;<br>  <span class="hljs-attr">allAuthors</span>: &#123;<br>    <span class="hljs-attr">fiction</span>: [<span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;22&#x27;</span>, <span class="hljs-string">&#x27;33&#x27;</span>],<br>    <span class="hljs-attr">scienceFiction</span>: [<span class="hljs-string">&#x27;44&#x27;</span>, <span class="hljs-string">&#x27;55&#x27;</span>, <span class="hljs-string">&#x27;66&#x27;</span>,<span class="hljs-string">&#x27;77&#x27;</span>],<br>    <span class="hljs-attr">fantasy</span>: [<span class="hljs-string">&#x27;J.R.Tole&#x27;</span>, <span class="hljs-string">&#x27;J.M.R&#x27;</span>, <span class="hljs-string">&#x27;Terry P.K&#x27;</span>]<br>  &#125;,<br>&#125;<br><br><span class="hljs-comment">//生成器写法（本质也是生成一个可迭代对象）</span><br>authors[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span>* ()&#123;<br>    <span class="hljs-keyword">let</span> allAuthors = <span class="hljs-variable language_">this</span>.<span class="hljs-property">allAuthors</span>;<br>    <span class="hljs-keyword">let</span> keys = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(allAuthors);<br>    <span class="hljs-keyword">let</span> valueOutput = [];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!valueOutput.<span class="hljs-property">length</span>)&#123;<br>            <span class="hljs-comment">//首次执行或者valueOutput为空的时候进入</span><br>            <span class="hljs-comment">//获取keys[0] 赋值给valueOutput</span><br>            <span class="hljs-keyword">if</span>(keys.<span class="hljs-property">length</span>)&#123;<br>                valueOutput = allAuthors[keys[<span class="hljs-number">0</span>]];<br>                keys.<span class="hljs-title function_">shift</span>();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// valueOutput   keys也空 退出迭代</span><br>            &#125;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//valueOutput不为空的时候进入逐个迭代，直至valueOutput为空</span><br>            <span class="hljs-keyword">yield</span> valueOutput.<span class="hljs-title function_">shift</span>();<br>            <br>        &#125;<br>    &#125;<br>    &#125;;<br><br><br><span class="hljs-comment">//可迭代对象写法</span><br>authors[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> allAuthors = <span class="hljs-variable language_">this</span>.<span class="hljs-property">allAuthors</span>;<br>    <span class="hljs-keyword">let</span> keys = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(allAuthors);<br>    <span class="hljs-keyword">let</span> valueOutput = [];<br><br>    <span class="hljs-keyword">return</span>&#123;<br>        <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">if</span>(!valueOutput.<span class="hljs-property">length</span>)&#123;<br>                <span class="hljs-keyword">if</span>(keys.<span class="hljs-property">length</span>)&#123;<br>                    valueOutput=allAuthors[keys[<span class="hljs-number">0</span>]];<br>                    keys.<span class="hljs-title function_">shift</span>();<br>                &#125;<br>            &#125;<br>           <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">done</span>:!valueOutput.<span class="hljs-property">length</span>,<br>                    <span class="hljs-attr">value</span>:valueOutput.<span class="hljs-title function_">shift</span>()<br>                &#125;            <br>        &#125;<br>    &#125;    <br>&#125;;<br><br><span class="hljs-keyword">let</span> r = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> p <span class="hljs-keyword">of</span> authors)&#123;<br>    r.<span class="hljs-title function_">push</span>(p)<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r)<br></code></pre></td></tr></table></figure><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs JS">建议使用大括号指定所要输出的一组变量写在文档尾部，明确导出的接口。<br>函数与类都需要有对应的名称，导出文档尾部也避免了无对应名称。<br><br><span class="hljs-comment">/*-----export [test.js]-----*/</span><br><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&quot;Tom&quot;</span>;<br><span class="hljs-comment">//也可以逐个输出 比如 export let myName = &quot;Tom&quot;;</span><br><span class="hljs-keyword">let</span> myAge = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">let</span> myfn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;My name is&quot;</span> + myName + <span class="hljs-string">&quot;! I&#x27;m &#x27;&quot;</span> + myAge + <span class="hljs-string">&quot;years old.&quot;</span><br>&#125;<br><span class="hljs-keyword">let</span> myClass =  <span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span> &#123;<br>    <span class="hljs-keyword">static</span> a = <span class="hljs-string">&quot;yeah!&quot;</span>;<br>&#125;<br><span class="hljs-keyword">let</span> mydefalut =  <span class="hljs-keyword">class</span> <span class="hljs-title class_">mydefalut</span> &#123;<br>    <span class="hljs-keyword">static</span> a = <span class="hljs-string">&quot;defalut!&quot;</span>;<br>&#125;<br><span class="hljs-keyword">export</span> defalut mydefalut<br><span class="hljs-keyword">export</span> &#123; myName, myAge, myfn, myClass &#125;<br> <br><span class="hljs-comment">/*-----import [xxx.js]-----*/</span><br><span class="hljs-keyword">import</span> &#123; myName, myAge, myfn, myClass &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myfn</span>());<span class="hljs-comment">// My name is Tom! I&#x27;m 20 years old.</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myAge);<span class="hljs-comment">// 20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName);<span class="hljs-comment">// Tom</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myClass.<span class="hljs-property">a</span> );<span class="hljs-comment">// yeah!</span><br><br><span class="hljs-comment">//使用as</span><br><span class="hljs-keyword">import</span> &#123; myName <span class="hljs-keyword">as</span> myName2, myAge, myfn, myClass &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName2);<span class="hljs-comment">// Tom</span><br><br><span class="hljs-comment">//使用*  接收全部</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> mod <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mod.<span class="hljs-property">myName2</span>);<span class="hljs-comment">// Tom</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mod.<span class="hljs-property">defult</span>.<span class="hljs-property">myName2</span>);<span class="hljs-comment">// Tom</span><br><br><br>+<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> 命令<br>在一个文件或模块中，<span class="hljs-keyword">export</span>、<span class="hljs-keyword">import</span> 可以有多个，<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> 仅有一个。<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> 中的 <span class="hljs-keyword">default</span> 是对应的导出接口变量。<br>通过 <span class="hljs-keyword">export</span> 方式导出，在导入时要加&#123; &#125;，<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> 则不需要。<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> 向外暴露的成员，可以使用任意变量来接收。<br><br></code></pre></td></tr></table></figure><h2 id="2-ES7-2016"><a href="#2-ES7-2016" class="headerlink" title="2.ES7(2016)"></a>2.ES7(2016)</h2><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">+ <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">includes</span><br><span class="hljs-comment">//判断数组中是否包含一个指定的值，根据情况如果包含则返回true，否则返回false</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">includes</span>(<span class="hljs-number">40</span>))  <br><br></code></pre></td></tr></table></figure><h3 id="Math-pow"><a href="#Math-pow" class="headerlink" title="Math.pow"></a>Math.pow</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Math.pow() 函数返回基数（base）的指数（exponent）次幂，即 baseexponent</span><br><span class="hljs-comment">//ES7之前的写法</span><br><span class="hljs-keyword">const</span> x1 = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>)   <span class="hljs-comment">//2的8次方</span><br><span class="hljs-comment">//ES7的写法</span><br><span class="hljs-keyword">const</span> x2 = <span class="hljs-number">2</span>**<span class="hljs-number">8</span><br><br><br></code></pre></td></tr></table></figure><h2 id="3-ES8-2017"><a href="#3-ES8-2017" class="headerlink" title="3.ES8(2017)"></a>3.ES8(2017)</h2><h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>+ <span class="hljs-keyword">async</span> 函数显式返回的不是 <span class="hljs-title class_">Promise</span> 的话，会自动包装成 <span class="hljs-title class_">Promise</span> 对象<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">firstAsync</span> () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">27</span>  <span class="hljs-comment">//等同于  return Promise.resolve(27)</span><br>    &#125;<br>    <span class="hljs-title function_">firstAsync</span>().<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>) <span class="hljs-comment">// 27</span><br><br>+<span class="hljs-keyword">await</span> 后面一定是 <span class="hljs-title class_">Promise</span> 对象，如果不是会自动包装成 <span class="hljs-title class_">Promise</span> 对象<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">firstAsync</span> () &#123;<br>      <span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;now it is done&#x27;</span>)<br>        &#125;, <span class="hljs-number">1000</span>)<br>      &#125;)<br><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> promise)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">40</span>))<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">firstAsync</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(’done‘)<br>    &#125;)<br><br><span class="hljs-comment">//输出  &#x27;now it is done&#x27;   40  2  3  ’done‘</span><br><br></code></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JS">+<span class="hljs-title class_">Object</span>.<span class="hljs-property">values</span><br><span class="hljs-comment">//返回给定对象自身可枚举值的数组。</span><br>+<span class="hljs-title class_">Object</span>.<span class="hljs-property">keys</span><br><span class="hljs-comment">//返回一个包含所有给定对象自身可枚举属性名称的数组。</span><br>+<span class="hljs-title class_">Object</span>.<span class="hljs-property">entries</span><br>    <span class="hljs-comment">//返回给定对象自身可枚举属性的[key, value]数组。//一级属性</span><br>    <span class="hljs-comment">//new Map() 构造函数接受一个可迭代的entries。</span><br>    <span class="hljs-comment">//借助Object.entries方法你可以很容易的将Object转换为Map:</span><br>        <span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br>        <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj));<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map); <span class="hljs-comment">// Map &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span><br>+<span class="hljs-title class_">Object</span>.<span class="hljs-property">getOwnPropertyDescriptor</span><br><span class="hljs-comment">//返回对象指定的属性配置。如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。</span><br><span class="hljs-comment">//属性配置  value/writeable/get/set/configurable</span><br><span class="hljs-comment">//Object.getOwnPropertyDescriptors(obj) 方法用来获取一个对象的所有自身属性的描述符。</span><br>  -逆向操作是<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, prop, descriptor)<br>    <span class="hljs-comment">//给对象添加一个属性并指定该属性的配置。</span><br>    <span class="hljs-comment">//descriptor 要定义或修改的属性描述符。</span><br><br></code></pre></td></tr></table></figure><h3 id="String-padding"><a href="#String-padding" class="headerlink" title="String padding"></a>String padding</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">i.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padStart</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;*#&#x27;</span>)   <span class="hljs-comment">//固定字符串长度为5位 不足则起始位用*#补齐，如*#*#1  *#*02  *#003  *0004</span><br>i.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;*#&#x27;</span>)   <span class="hljs-comment">//固定字符串长度为5位 不足则结束位用*#补齐</span><br></code></pre></td></tr></table></figure><h2 id="4-ES9-2018"><a href="#4-ES9-2018" class="headerlink" title="4.ES9 (2018)"></a>4.ES9 (2018)</h2><h3 id="for-await-of"><a href="#for-await-of" class="headerlink" title="for await of"></a>for await of</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Gen</span> (time) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">resolve</span>(time)<br>    &#125;, time)<br>  &#125;)<br>&#125;<br><br>+ 正常遍历(同步操作)<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>  <span class="hljs-keyword">let</span> arr = [<span class="hljs-title class_">Gen</span>(<span class="hljs-number">2000</span>), <span class="hljs-title class_">Gen</span>(<span class="hljs-number">100</span>), <span class="hljs-title class_">Gen</span>(<span class="hljs-number">3000</span>)]<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(), item.<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>))<br>  &#125;<br>&#125;<br><span class="hljs-title function_">test</span>()<br><span class="hljs-comment">//执行顺序  先执行for of循环 第一个item  执行Date.now(),item.then返回一个promise实例，此时promise状态为pending；</span><br><span class="hljs-comment">//重复其余for of循环 注意for of循环的事件很短 很快就完成了</span><br><span class="hljs-comment">//每个promise实例依次完成resolve，执行promise.then(console.log)</span><br><br>+普通异步函数<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>  <span class="hljs-keyword">let</span> arr = [<span class="hljs-title class_">Gen</span>(<span class="hljs-number">2000</span>), <span class="hljs-title class_">Gen</span>(<span class="hljs-number">100</span>), <span class="hljs-title class_">Gen</span>(<span class="hljs-number">3000</span>)]<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(), <span class="hljs-keyword">await</span> item.<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;66&#x27;</span>)))<br>  &#125;<br>&#125;<br><span class="hljs-title function_">test</span>()<br><span class="hljs-comment">//先执行for of循环  第一个item  读取到Date.now(), await item.then(console.log)</span><br><span class="hljs-comment">//需要先执行await异步操作  item返回一个promise实例 且该实例是resoved的  且需要异步操作 此时then被调用</span><br><span class="hljs-comment">//执行语句 console.log(&#x27;66&#x27;)   输出66</span><br><span class="hljs-comment">//promise实例的resove执行完毕 value返回2000， 及await接收到返回值2000 ，此时输出 console.log(Date.now(), 2000)</span><br><span class="hljs-comment">//其他同理</span><br><br><br>+<span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> <span class="hljs-keyword">of</span> 写法<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>  <span class="hljs-keyword">let</span> arr = [<span class="hljs-title class_">Gen</span>(<span class="hljs-number">2000</span>), <span class="hljs-title class_">Gen</span>(<span class="hljs-number">100</span>), <span class="hljs-title class_">Gen</span>(<span class="hljs-number">3000</span>)]<br>  <span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(), item)<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">test</span>()<br><br><span class="hljs-comment">//for await读取到item 执行函数体 console.log(xxx)</span><br><span class="hljs-comment">//其中item在未成功返回之前 才会进入下一次的循环</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js">+自定义异步数据增加可迭代协议<br><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-title class_">Gen</span> (time) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">resolve</span>(&#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">value</span>: time &#125;)<br>      &#125;, time)<br>    &#125;)<br>  &#125;,<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">asyncIterator</span>] () &#123;<br>    <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      next () &#123;<br>        self.<span class="hljs-property">count</span>++<br>        <span class="hljs-keyword">if</span> (self.<span class="hljs-property">count</span> &lt; <span class="hljs-number">4</span>) &#123;<br>          <span class="hljs-keyword">return</span> self.<span class="hljs-title class_">Gen</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1000</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(&#123;<br>            <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span><br>          &#125;)<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>  <span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> obj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(), item)<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">test</span>()<br></code></pre></td></tr></table></figure><h3 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally"></a>Promise.prototype.finally</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Gen</span> = (<span class="hljs-params">time</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (time &lt; <span class="hljs-number">500</span>) &#123;<br>        <span class="hljs-title function_">reject</span>(time)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(time)<br>      &#125;<br>    &#125;, time)<br>  &#125;)<br>&#125;<br><br><span class="hljs-title class_">Gen</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1000</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;resolve&#x27;</span>, val))<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;reject&#x27;</span>, err))<br>  .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;finish&#x27;</span>) &#125;)<br><br></code></pre></td></tr></table></figure><h3 id="Object-Rest-Spread"><a href="#Object-Rest-Spread" class="headerlink" title="Object Rest Spread"></a>Object Rest Spread</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> input = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">const</span> test = &#123;<br>  <span class="hljs-attr">d</span>: <span class="hljs-number">5</span><br>&#125;<br><span class="hljs-keyword">const</span> output = &#123;<br>  ...input,<br>  ...test,<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(input, output)<br><br><span class="hljs-comment">//浅复制 不是引用所以不会引起修改</span><br>input.<span class="hljs-property">a</span> = <span class="hljs-number">4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(input, output)<br><br><span class="hljs-keyword">const</span> input = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">d</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">e</span>: <span class="hljs-number">5</span><br>&#125;<br><br><span class="hljs-keyword">const</span> &#123; a, b, ...rest &#125; = input<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, rest)<br><br></code></pre></td></tr></table></figure><h3 id="RegExp-Updates"><a href="#RegExp-Updates" class="headerlink" title="RegExp Updates"></a>RegExp Updates</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js">+dotAll<br>    dotAll 属性表明是否在正则表达式中一起使用<span class="hljs-string">&quot;s&quot;</span>修饰符（引入/s 修饰符，使得。可以匹配任意单个字符）。<br>    dotAll 是一个只读的属性，属于单个正则表达式实例。<br>    <span class="hljs-string">&quot;s&quot;</span>修饰符表示，特殊字符<span class="hljs-string">&quot;.&quot;</span>应另外匹配字符串中的下述行终结符（line terminator characters），否则将会失配：<br>        U+000A 换行符（<span class="hljs-string">&quot;\n&quot;</span>）<br>        U+000D 回车符（<span class="hljs-string">&quot;\r&quot;</span>）<br>        U+<span class="hljs-number">2028</span> 行分隔符（line separator）<br>        U+<span class="hljs-number">2029</span> 段分隔符（paragraph separator）<br>    这实际上意味着<span class="hljs-string">&quot;.&quot;</span>将会匹配任意的单个 <span class="hljs-title class_">Unicode</span> <span class="hljs-title class_">Basic</span> <span class="hljs-title class_">Multilingual</span> <span class="hljs-title class_">Plane</span> (<span class="hljs-variable constant_">BMP</span>) 字符。若要使其与 astral 字符（大于 \uFFFF 的 <span class="hljs-title class_">Unicode</span> 字符）匹配，你应当使用<span class="hljs-string">&quot;u&quot;</span>（<span class="hljs-title class_">Unicode</span>）修饰符。一起使用这两个修饰符，<span class="hljs-string">&quot;.&quot;</span>将无一例外地匹配任意 <span class="hljs-title class_">Unicode</span> 字符。<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-regexp">/foo.bar/</span>.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;foo\nbar&#x27;</span>))  <br>    <span class="hljs-comment">// 返回false    默认情况下的任意字符’.‘ 并不任意匹配 </span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-regexp">/foo.bar/u</span>.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;foo\nbar&#x27;</span>))  <br>    <span class="hljs-comment">// 返回false   unicode编码模式也无效</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-regexp">/foo.bar/</span>s.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;foo\nbar&#x27;</span>))<br>    <span class="hljs-comment">//返回true</span><br>    <span class="hljs-keyword">const</span> re = <span class="hljs-regexp">/foo.bar/</span>sugi<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(re.<span class="hljs-property">dotAll</span>)   <span class="hljs-comment">//返回true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(re.<span class="hljs-property">flags</span>)  <span class="hljs-comment">//返回sugi</span><br><br><br>+命名分组捕获<br>    <span class="hljs-keyword">const</span> t = <span class="hljs-string">&#x27;2022-08-20&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t[<span class="hljs-number">1</span>])  <span class="hljs-comment">//2022</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t[<span class="hljs-number">2</span>])  <span class="hljs-comment">//08 </span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t[<span class="hljs-number">3</span>])  <span class="hljs-comment">//20</span><br><br>    <span class="hljs-comment">//如果使用 g 标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。</span><br>    <span class="hljs-comment">//如果未使用 g 标志，则仅返回第一个完整匹配及其相关的捕获组（Array）。 在这种情况下，返回的项目将具有如下所述的其他属性。</span><br>    <span class="hljs-comment">//捕获组参照上述内容  一个正则语句内有多个捕获条件</span><br><br>    <span class="hljs-comment">//groups: 一个命名捕获组对象，其键是捕获组名称，值是捕获组，如果未定义命名捕获组，则为 undefined。有关详细信息，请参阅组和范围。</span><br>    <span class="hljs-comment">//index: 匹配的结果的开始位置</span><br>    <span class="hljs-comment">//input: 搜索的字符串。</span><br>    -捕获组命名<br>        <span class="hljs-keyword">const</span> t = <span class="hljs-string">&#x27;2019-06-07&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t.<span class="hljs-property">groups</span>.<span class="hljs-property">year</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t.<span class="hljs-property">groups</span>.<span class="hljs-property">month</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(t.<span class="hljs-property">groups</span>.<span class="hljs-property">day</span>)<br><br>+后行断言<br><br>    <span class="hljs-keyword">let</span> test = <span class="hljs-string">&#x27;hello world&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/hello(?=\sworld)/</span>))<span class="hljs-comment">//正常先行断言 查到找hello后匹配后面的捕获内容</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(?&lt;!helle\s)world/</span>))<span class="hljs-comment">//新增后行断言 查到找world后匹配后面的捕获内容</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">标志描述<br>g全局搜索。<br>i不区分大小写搜索。<br>m多行搜索。<br>s允许 . 匹配换行符。<br>u使用 unicode 码的模式进行匹配。<br>y执行“粘性 (sticky)”搜索，匹配从目标字符串的当前位置开始。<br></code></pre></td></tr></table></figure><h2 id="5-ES10-2019"><a href="#5-ES10-2019" class="headerlink" title="5.ES10(2019)"></a>5.ES10(2019)</h2><h3 id="Array-1"><a href="#Array-1" class="headerlink" title="Array"></a>Array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">flat</span><br>    <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">22</span>, <span class="hljs-number">33</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]]]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">flat</span>())  <span class="hljs-comment">//[1, 22, 33, 4, 5, Array(3)]  默认扁平化一级</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">flat</span>(<span class="hljs-number">2</span>))  <span class="hljs-comment">// [1, 22, 33, 4, 5, 6, 7, Array(2)]   8 9 需要flat（3）才能展开 就看数据对应左侧距离‘，’有几个中括号就是几级</span><br><br>+<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">flatmap</span>（<span class="hljs-keyword">function</span>）<br><span class="hljs-comment">//只能针对一维数组 嵌套数组无法执行</span><br>    <span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> [item * <span class="hljs-number">2</span>]).<span class="hljs-title function_">flat</span>())<span class="hljs-comment">//[2, 4, 6]</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> [item * <span class="hljs-number">2</span>]))<span class="hljs-comment">//[2, 4, 6]</span><br><span class="hljs-comment">//map是个伪数组</span><br><br></code></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">trimStart</span>  <span class="hljs-comment">//去掉字符串起始空格</span><br>+<span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">trimEnd</span>   <span class="hljs-comment">//去掉字符串结束处空格</span><br>+<span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">trim</span>    <span class="hljs-comment">//去掉首尾空格字符</span><br>+<span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">matchAll</span>(regexp)<br><span class="hljs-comment">//返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">select</span> (regExp, str) &#123;<br>      <span class="hljs-keyword">const</span> matches = []<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> match <span class="hljs-keyword">of</span> str.<span class="hljs-title function_">matchAll</span>(regExp)) &#123;<br>        matches.<span class="hljs-title function_">push</span>(match[<span class="hljs-number">1</span>])<br>      &#125;<br>      <span class="hljs-keyword">return</span> matches<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">select</span>(<span class="hljs-regexp">/&quot;([^&quot;]*)&quot;/g</span>, str))<br><span class="hljs-comment">//如果使用 matchAll ，就可以不必使用 while 循环加 exec 方式（且正则表达式需使用 /g 标志）。使用 matchAll 会得到一个迭代器的返回值，配合 for...of, array spread, 或者 Array.from() 可以更方便实现功能.如果没有 /g 标志，matchAll 会抛出异常。</span><br></code></pre></td></tr></table></figure><h3 id="Object-1"><a href="#Object-1" class="headerlink" title="Object"></a>Object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-keyword">const</span> arr = [[<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-number">2</span>]]<br>    <span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(arr)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">bar</span>)<br><br>    <span class="hljs-keyword">const</span> obj = &#123;<br>      <span class="hljs-attr">abc</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">def</span>: <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">ghksks</span>: <span class="hljs-number">3</span><br>    &#125;<br><br>    <span class="hljs-keyword">let</span> res = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj).<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">[key, val]</span>) =&gt;</span> key.<span class="hljs-property">length</span> === <span class="hljs-number">3</span>)<br>    )<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br></code></pre></td></tr></table></figure><h2 id="6-ES11-2020"><a href="#6-ES11-2020" class="headerlink" title="6.ES11(2020)"></a>6.ES11(2020)</h2><h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-keyword">class</span>  的私有属性需要在其前面加#，无法在外部通过静态方法调用，只能在<span class="hljs-keyword">class</span> 内部调用 <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>            <span class="hljs-comment">//公有属性</span><br>            name;<br>            <span class="hljs-comment">//私有属性  </span><br>            #age;<br>            #weight;<br>            <span class="hljs-comment">//构造方法</span><br>            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, weight</span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>                <span class="hljs-variable language_">this</span>.#age = age;<br>                <span class="hljs-variable language_">this</span>.#weight = weight;<br>            &#125;<br><br>            <span class="hljs-title function_">intro</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.#age);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.#weight);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//实例化</span><br>        <span class="hljs-keyword">const</span> girl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;晓红&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;45kg&#x27;</span>);<br><br>        <span class="hljs-comment">// console.log(girl.name);</span><br>        <span class="hljs-comment">// console.log(girl.#age);</span><br>        <span class="hljs-comment">// console.log(girl.#weight);</span><br></code></pre></td></tr></table></figure><h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">allSettled</span>  接收一个数组参数，数组元素均为promise对象<br><span class="hljs-title class_">Promise</span>.<span class="hljs-property">allSettled</span> 返回一个promise实例，<br>[[<span class="hljs-title class_">PromiseState</span>]]: <span class="hljs-string">&quot;fulfilled&quot;</span> 状态固定为已完成<br>    [[<span class="hljs-title class_">PromiseResult</span>]]:<span class="hljs-title class_">Array</span>   <span class="hljs-comment">//返回内容是数组中promise对象的执行状态</span><br><br><br><br><span class="hljs-comment">//声明两个promise对象</span><br>        <span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;商品数据 - 1&#x27;</span>);<br>            &#125;,<span class="hljs-number">1000</span>)<br>        &#125;);<br><br>        <span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-comment">//resolve(&#x27;商品数据 - 2&#x27;);</span><br>                <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错啦!&#x27;</span>);<br>            &#125;,<span class="hljs-number">1000</span>)<br>        &#125;);<br><br>        <span class="hljs-comment">//调用 allsettled 方法</span><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>([p1, p2]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br><span class="hljs-comment">//[[PromiseState]]: &quot;fulfilled&quot;</span><br><br>        <br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2]);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>[[<span class="hljs-title class_">PromiseState</span>]]: <span class="hljs-string">&quot;rejected&quot;</span><br></code></pre></td></tr></table></figure><h3 id="String-prototype-matchALL"><a href="#String-prototype-matchALL" class="headerlink" title="String.prototype.matchALL"></a>String.prototype.matchALL</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">matchALL</span>（<span class="hljs-title class_">RegExp</span>）<br>正则批量匹配，返回一个可迭代的对象<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">`&lt;ul&gt;</span><br><span class="hljs-string">            &lt;li&gt;</span><br><span class="hljs-string">                &lt;a&gt;肖生克的救赎&lt;/a&gt;</span><br><span class="hljs-string">                &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span><br><span class="hljs-string">            &lt;/li&gt;</span><br><span class="hljs-string">            &lt;li&gt;</span><br><span class="hljs-string">                &lt;a&gt;阿甘正传&lt;/a&gt;</span><br><span class="hljs-string">                &lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span><br><span class="hljs-string">            &lt;/li&gt;</span><br><span class="hljs-string">        &lt;/ul&gt;`</span>;<br><br>        <span class="hljs-comment">//声明正则</span><br>        <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg<br><br>        <span class="hljs-comment">//调用方法</span><br>        <span class="hljs-keyword">const</span> result = str.<span class="hljs-title function_">matchAll</span>(reg); <span class="hljs-comment">//返回一个可迭代对象  RegExpStringIterator</span><br><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> result)&#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);   &#125;<br><span class="hljs-comment">// v是一个对象   第一个v是下面内容  0是匹配正则的语句，1~2是捕获组（可能未定义的内容）</span><br>                    <span class="hljs-number">0</span>: <span class="hljs-string">&quot;&lt;li&gt;\n &lt;a&gt;肖生克的救赎&lt;/a&gt;\n &lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;&quot;</span><br>                    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;肖生克的救赎&quot;</span><br>                    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;上映日期: 1994-09-10&quot;</span><br>                    <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span><br>                    <span class="hljs-attr">index</span>: <span class="hljs-number">17</span><br>                    <span class="hljs-attr">input</span>: <span class="hljs-comment">//就是整个str</span><br>                    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br><br>        <span class="hljs-keyword">const</span> arr = [...result];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br><br></code></pre></td></tr></table></figure><h3 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">+可选链就是一个问号？   <br>比如   a.<span class="hljs-property">b</span>.<span class="hljs-property">c</span>  如果a或者b是<span class="hljs-literal">undefined</span>的情况下  读取c则会报错   不能再一个<span class="hljs-literal">undefined</span>的对象上读取属性<br>此时如果用可选链  a?.<span class="hljs-property">b</span>?.<span class="hljs-property">c</span>   此时无论a或b是否存在，c都会不会报错，如果a或b为<span class="hljs-literal">undefined</span>，则此时c返回<span class="hljs-literal">undefined</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">config</span>)&#123;<br>            <span class="hljs-comment">//  之前的写法  需要判断是否存在</span><br>            <span class="hljs-comment">//均为真返回最后一个结果  </span><br>            <span class="hljs-comment">//const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;   </span><br>            <span class="hljs-keyword">const</span> dbHost = config?.<span class="hljs-property">db</span>?.<span class="hljs-property">host</span>;<br><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dbHost);<br>        &#125;<br><br>        <span class="hljs-title function_">main</span>(&#123;<br>            <span class="hljs-attr">db</span>: &#123;<br>                <span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;192.168.1.100&#x27;</span>,<br>                <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;root&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">cache</span>: &#123;<br>                <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;192.168.1.200&#x27;</span>,<br>                <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;admin&#x27;</span><br>            &#125;<br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="动态import"><a href="#动态import" class="headerlink" title="动态import"></a>动态import</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">import</span> (<span class="hljs-string">&#x27;.xxx.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span>=&gt;</span>&#123;<br>        <span class="hljs-variable language_">module</span>.<span class="hljs-property">xxxx</span>  <span class="hljs-comment">//调用模块中的方法等</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-ES12-2021"><a href="#7-ES12-2021" class="headerlink" title="7.ES12(2021)"></a>7.ES12(2021)</h2><h3 id="String-prototype-replaceAll"><a href="#String-prototype-replaceAll" class="headerlink" title="String.prototype.replaceAll"></a>String.prototype.replaceAll</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">+把字符串中符合的内容全部替换    之前的方法需要使用正则且开启全局匹配<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">S1</span>=<span class="hljs-string">&#x27;A cat sit on the  cat mat&#x27;</span>;<br>    <span class="hljs-keyword">const</span> output1=<span class="hljs-variable constant_">S1</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>);<br>    <span class="hljs-keyword">const</span> output2=<span class="hljs-variable constant_">S1</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/cat/</span>,<span class="hljs-string">&#x27;dog&#x27;</span>);<br>    <span class="hljs-keyword">const</span> output3=<span class="hljs-variable constant_">S1</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/cat/g</span>,<span class="hljs-string">&#x27;dog&#x27;</span>);<br>    <span class="hljs-keyword">const</span> output4=<span class="hljs-variable constant_">S1</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output1);  <span class="hljs-comment">//A dog sit on the  cat mat</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output2);  <span class="hljs-comment">//A dog sit on the  cat mat</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output3);  <span class="hljs-comment">//A dog sit on the  dog mat</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output4);  <span class="hljs-comment">//A dog sit on the  dog mat</span><br></code></pre></td></tr></table></figure><h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">any</span>() 接收一个由 <span class="hljs-title class_">Promise</span> 所组成的可迭代对象，该方法会返回一个新的 promise，一旦可迭代对象内的任意一个 promise 变成了兑现状态，那么由该方法所返回的 promise 就会变成兑现状态，并且它的兑现值就是可迭代对象内的首先兑现的 promise 的兑现值。如果可迭代对象内的 promise 最终都没有兑现（即所有 promise 都被拒绝了），那么该方法所返回的 promise 就会变成拒绝状态，并且它的拒因会是一个 <span class="hljs-title class_">AggregateError</span> 实例，这是 <span class="hljs-title class_">Error</span> 的子类，用于把单一的错误集合在一起。<br><br><br>+promise.<span class="hljs-title function_">race</span>()的区别<br> promise.<span class="hljs-title function_">race</span>()关注的是哪个promise对象先行返回（无论promise状态）；promise.<span class="hljs-title function_">any</span>()关注的是第一个返回的resolve的对象<br>    <br>        <span class="hljs-keyword">const</span> pErr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>          <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;总是失败&quot;</span>);<br>        &#125;);<br><br>        <span class="hljs-keyword">const</span> pSlow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>          <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">500</span>, <span class="hljs-string">&quot;最终完成&quot;</span>);<br>        &#125;);<br><br>        <span class="hljs-keyword">const</span> pFast = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>          <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;很快完成&quot;</span>);<br>        &#125;);<br><br>        <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">any</span>([pErr, pSlow, pFast]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);    <span class="hljs-comment">// pFa &#x27;&#x27;很快完成&quot;</span><br>            <br>         <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([pErr, pSlow, pFast]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);    <span class="hljs-comment">// &quot;总是失败&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Logical-Assignment-Operators"><a href="#Logical-Assignment-Operators" class="headerlink" title="Logical Assignment Operators"></a>Logical Assignment Operators</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">+就是个语法糖<br>a || = b，如果a为<span class="hljs-literal">false</span>，则把b赋值给a，实际编译就是a|| (a=b)<br>a &amp;&amp; = b，如果a b均为<span class="hljs-literal">true</span> ，则把b赋值给a，实际编译就是 a&amp;&amp; (a=b)<br></code></pre></td></tr></table></figure><h3 id="Number-Separators（数值分隔符）"><a href="#Number-Separators（数值分隔符）" class="headerlink" title="Number Separators（数值分隔符）"></a>Number Separators（数值分隔符）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">在数据类型中增加下划线_辅助阅读<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">10000000000</span> === <span class="hljs-number">10_000_000_000</span>)    <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6-ES12</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript原型原型链</title>
    <link href="/2022/09/02/JavaScript%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/09/02/JavaScript%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript原型原型链"><a href="#JavaScript原型原型链" class="headerlink" title="JavaScript原型原型链"></a>JavaScript原型原型链</h1><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>在 JavaScript 中，对象有一个特殊的隐藏属性 <code>[[Prototype]]</code>，它要么为 <code>null</code>，要么就是对另一个对象的引用，该对象被称为“原型”。</p><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p><strong>当我们从对象中读取一个缺失的属性时，JavaScript 会自动从原型中获取该属性。</strong> 在编程中，这种行为被称为“原型继承”。</p><p>对象实例并没有<code>toString</code>方法，对象原型Object上有<code>toString</code>方法，看到<code>toString</code>方法就是原型链到头了</p><h2 id="设置原型的三种方法"><a href="#设置原型的三种方法" class="headerlink" title="设置原型的三种方法"></a>设置原型的三种方法</h2><h3 id="1-proto-隐式原型"><a href="#1-proto-隐式原型" class="headerlink" title="1.__proto__ (隐式原型)"></a>1.<code>__proto__</code> (隐式原型)</h3><p>使用特殊的名字 <code>__proto__</code>，在现代JavaScript中，<code>__proto__</code> 是可读可写的。</p><ul><li><p>原型链不能形成闭环。</p></li><li><p><code>__proto__</code>的值只能是对象或者<code>null</code>，其他的类型都会被忽略。</p></li><li><p>一个对象不能从其他两个对象获得继承。一个对象只能有一个 <code>[[Prototype]]</code>。</p></li><li><p><code>_proto__</code> 与内部的 <code>[[Prototype]]</code> <strong>不一样</strong>。<code>__proto__</code> 是 <code>[[Prototype]]</code> 的 getter&#x2F;setter。</p></li></ul><h3 id="2-Object-setPrototypeOf"><a href="#2-Object-setPrototypeOf" class="headerlink" title="2.Object.setPrototypeOf()"></a>2.<code>Object.setPrototypeOf()</code></h3><p>尽管连node也支持<code>__proto__</code>这种写法，但是我们应该使用<code>Object.getPrototypeOf()</code>和<code>Object.setPrototypeOf()</code>来替代。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> animal = &#123;<span class="hljs-attr">eats</span>: <span class="hljs-literal">true</span>&#125;;<br><span class="hljs-keyword">let</span> rabbit = &#123;<span class="hljs-attr">jumps</span>:<span class="hljs-literal">true</span>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(rabbit,animal); <span class="hljs-comment">//将animal设置为rabbit的原型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rabbit);  <span class="hljs-comment">//rabbit可以通过原型链访问到eats属性</span><br></code></pre></td></tr></table></figure><h3 id="3-Object-create-proto"><a href="#3-Object-create-proto" class="headerlink" title="3.Object.create(proto)"></a>3.Object.create(proto)</h3><p>使用<code>Object.create(proto)</code>，用给定的 <code>proto</code> 作为原型创建一个空对象。</p><p>我们使用对象字面量或者Object构造函数创建的对象会默认继承自<code>Object.prototype</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> animal = &#123;<span class="hljs-attr">eats</span>: <span class="hljs-literal">true</span>&#125;;<br><span class="hljs-keyword">let</span> rabbit = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(animal); <span class="hljs-comment">//让animal作为rabbit的原型</span><br></code></pre></td></tr></table></figure><h2 id="Function-prototype"><a href="#Function-prototype" class="headerlink" title="Function.prototype"></a>Function.prototype</h2><h3 id="常规prototype"><a href="#常规prototype" class="headerlink" title="常规prototype"></a>常规prototype</h3><p>通过<code>new 构造函数名()</code>来创建一个新的对象。在这里，将构造函数名简写为<code>F</code>，也即 <code>new F()</code>。</p><p>其实不仅构造函数，任何函数都有 <code>prototype</code> 属性，即使我们没有提供它。</p><p><strong>如果 <code>F.prototype</code> 是一个对象，那么 <code>new</code> 操作符会使用它为新对象设置 <code>[[Prototype]]</code>。</strong></p><p>这里的 <code>F.prototype</code> 指的是 <code>F</code> 的一个名为 <code>&quot;prototype&quot;</code> 的常规属性。这听起来与“原型”这个术语很类似，但这里我们实际上指的是具有该名字的常规属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> animal = &#123;<span class="hljs-attr">eats</span>: <span class="hljs-literal">true</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Rabbit</span>(<span class="hljs-params">name</span>)&#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-comment">// 将Rabbit函数的prototype属性值设置为animal对象</span><br><span class="hljs-title class_">Rabbit</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = animal;<br><span class="hljs-keyword">let</span> rabbit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rabbit</span>(<span class="hljs-string">&quot;White Rabbit&quot;</span>);<br><span class="hljs-comment">// rabbit.__proto__ == animal</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rabbit.<span class="hljs-property">eats</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>设置 <code>Rabbit.prototype = animal</code> 的字面意思是：“当创建了一个 <code>new Rabbit</code> 时，把它的 <code>[[Prototype]]</code> 赋值为 <code>animal</code>”。</p><p><code>F.prototype</code> 属性仅在 <code>new F</code> 被调用时使用，它为新对象的 <code>[[Prototype]]</code> 赋值。</p><p>如果在创建之后，<code>F.prototype</code> 属性有了变化（<code>F.prototype = &lt;another object&gt;</code>），那么通过 <code>new F</code> 创建的新对象也将随之拥有新的对象作为 <code>[[Prototype]]</code>，但已经存在的对象将保持旧有的值。</p><h3 id="默认prototype"><a href="#默认prototype" class="headerlink" title="默认prototype"></a>默认prototype</h3><p>每个函数都有<code>prototype</code>属性，默认的 <code>&quot;prototype&quot;</code> 是一个只有属性 <code>constructor</code> 的对象，属性 <code>constructor</code> 指向函数自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title class_">Rabbit</span> =&#123;<br>prototype：&#123;<br>constructor：<span class="hljs-title class_">Rabbit</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//如果我们什么都不做，constructor 属性可以通过 [[Prototype]] 给所有 rabbits 使用：</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Rabbit</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-comment">// by default:</span><br><span class="hljs-comment">// Rabbit.prototype = &#123; constructor: Rabbit &#125; </span><br><span class="hljs-keyword">let</span> rabbit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rabbit</span>(); <span class="hljs-comment">// 继承自&#123;constructor: Rabbit&#125; </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rabbit.<span class="hljs-property">constructor</span> == <span class="hljs-title class_">Rabbit</span>); <span class="hljs-comment">// true (from prototype)</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//我们可以使用 `constructor` 属性来创建一个新对象，该对象使用与现有对象相同的构造器。因为新创建的对象继承的constuctor指向原来的构造函数！</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Rabbit</span>(<span class="hljs-params">name</span>) &#123; <br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <br><span class="hljs-title function_">alert</span>(name);<br>&#125; <br><span class="hljs-keyword">let</span> rabbit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rabbit</span>(<span class="hljs-string">&quot;White Rabbit&quot;</span>); <br><span class="hljs-keyword">let</span> rabbit2 = <span class="hljs-keyword">new</span> rabbit.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;Black Rabbit&quot;</span></span>);<br><br><span class="hljs-comment">//JavaScript 自身并不能确保正确的 &quot;constructor&quot; 函数值。</span><br><br><span class="hljs-comment">//比如我们如果将函数的prototype属性直接替换掉，那就不会存在constructor属性。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Rabbit</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-title class_">Rabbit</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<span class="hljs-attr">eats</span>: <span class="hljs-literal">true</span>&#125;;<br><span class="hljs-keyword">let</span> rabbit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rabbit</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rabbit.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Rabbit</span>); <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//此时JS 会好给原型添加一个constructor属性，而且 constructor会指向 Object 构造函数。</span><br><span class="hljs-title class_">Rabbit</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>  ===object<br><br><span class="hljs-comment">//因此我们就不能依靠 constructor 辨别创建的对象类型了。虽然，instanceOf 还是能可靠地返回对象的类型。</span><br>rebbit <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Rabbit</span>  <span class="hljs-comment">//true</span><br>rabbit.<span class="hljs-property">constructor</span> ===<span class="hljs-title class_">Rabbit</span>  <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//为了确保正确的 &quot;constructor&quot;，我们可以选择添加/删除属性到默认 &quot;prototype&quot;，而不是将其整个覆盖，或者手动重新创建</span><br><span class="hljs-title class_">Rabbit</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">jumps</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-title class_">Rabbit</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123; <span class="hljs-attr">jumps</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">constructor</span>: <span class="hljs-title class_">Rabbit</span>&#125;;<br><span class="hljs-comment">// 默认的 Rabbit.prototype.constructor 被保留了下来</span><br><br><span class="hljs-comment">//这种手动添加 constructor 属性也有一点小问题，那就是原生的 constructor 属性是不可枚举的。而这种直接添加的方法，constructor 属性是可枚举的，也即Enumerable属性为true。所以，我们应该使用 Object.defineProperty() 方法来添加 constructor属性。</span><br><br><span class="hljs-title class_">Rabbit</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<span class="hljs-attr">jumps</span>:<span class="hljs-literal">true</span>&#125;;<br><span class="hljs-comment">// 给Rabbit.prototype 添加 constructor属性，其值指向Rabbit函数且不可枚举</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Rabbit</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>,<span class="hljs-string">&#x27;constructor&#x27;</span>,&#123;<br><span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">value</span>: <span class="hljs-title class_">Rabbit</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h2><p><code>Object</code> 就是一个内建的对象构造函数，其自身的 <code>prototype</code> 指向一个带有 <code>toString</code> 和其他方法的一个巨大的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建新对象</span><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-comment">//默认进行了</span><br>obj.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>另外 <code>Object.prototype</code> 上方的链中没有更多的 <code>[[Prototype]]</code>。也不能给<code>Object.prototype</code>继续设置原型对象了（会报错）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>   <span class="hljs-comment">//null</span><br></code></pre></td></tr></table></figure><h2 id="其他内建对象prototype"><a href="#其他内建对象prototype" class="headerlink" title="其他内建对象prototype"></a>其他内建对象prototype</h2><p>其他内建对象，像 <code>Array</code>、<code>Date</code>、<code>Function</code> 及其他，都在 prototype 上挂载了方法。</p><p>例如，当我们创建一个数组 <code>[1, 2, 3]</code>，在内部会默认使用 <code>new Array()</code> 构造器。因此 <code>Array.prototype</code> 变成了这个数组的 prototype，并为这个数组提供数组的操作方法。这样内存的存储效率是很高的。</p><p>按照规范，所有的内建原型顶端都是 <code>Object.prototype</code>。这就是为什么有人说“一切都从对象继承而来”。</p><p><a href='https://jiaqicoder.com/2021/07/31/%E5%9B%BE%E8%A7%A3%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/' >本文出处</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原型链</tag>
      
      <tag>prototype</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记(基于ES5)</title>
    <link href="/2022/08/31/JavaScript%E7%AC%94%E8%AE%B0-%E5%9F%BA%E4%BA%8EES5/"/>
    <url>/2022/08/31/JavaScript%E7%AC%94%E8%AE%B0-%E5%9F%BA%E4%BA%8EES5/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript笔记-基于ES5"><a href="#JavaScript笔记-基于ES5" class="headerlink" title="JavaScript笔记(基于ES5)"></a>JavaScript笔记(基于ES5)</h1><h2 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h2><h3 id="1-对象（Object）"><a href="#1-对象（Object）" class="headerlink" title="1.对象（Object）"></a>1.对象（Object）</h3><pre><code class="hljs">- 对象是JS中的引用数据类型- 对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性- 使用typeof检查一个对象时，会返回object- 创建对象    - 方式一：        - var obj = new Object();    - 方式二：        - var obj = &#123;&#125;;- 向对象中添加属性    - 语法：        对象.属性名 = 属性值;        对象[&quot;属性名&quot;] = 属性值;                - 对象的属性名没有任何要求，不需要遵守标识符的规范，            但是在开发中，尽量按照标识符的要求去写。        - 属性值也可以任意的数据类型。- 读取对象中的属性    - 语法：        对象.属性名        对象[&quot;属性名&quot;]    - 如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined    - 删除对象中的属性    - 语法：        delete 对象.属性名        delete 对象[&quot;属性名&quot;]        - 使用in检查对象中是否含有指定属性    - 语法：&quot;属性名&quot; in 对象        - 如果在对象中含有该属性，则返回true            如果没有则返回false            - 使用对象字面量，在创建对象时直接向对象中添加属性    语法：        var obj = &#123;                        属性名:属性值,                        属性名:属性值,                        属性名:属性值,                        属性名:属性值                &#125;                - 基本数据类型和引用数据类型    - 基本数据类型        String Number Boolean Null Undefined    - 引用数据类型        Object    - 基本数据类型的数据，变量是直接保存的它的值。        变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。    - 引用数据类型的数据，变量是保存的对象的引用（内存地址）。        如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。    - 比较两个变量时，对于基本数据类型，比较的就是值，        对于引用数据类型比较的是地址，地址相同才相同</code></pre><h3 id="2-函数（Function）"><a href="#2-函数（Function）" class="headerlink" title="2.函数（Function）"></a>2.函数（Function）</h3><pre><code class="hljs">- 函数也是一个对象，也具有普通对象的功能- 函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码- 使用typeof检查一个函数时会返回function- 创建函数    - 函数声明        function 函数名([形参1,形参2...形参N])&#123;            语句...        &#125;    - 函数表达式        var 函数名 = function([形参1,形参2...形参N])&#123;            语句...        &#125;;        - 调用函数    - 语法：函数对象([实参1,实参2...实参N]);        fun() sum() alert() Number() parseInt()    - 当我们调用函数时，函数中封装的代码会按照编写的顺序执行- 形参和实参    - 形参：形式参数        - 定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开            定义形参就相当于在函数内声明了对应的变量但是并不赋值，            形参会在调用时才赋值。                - 实参：实际参数        - 调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,            调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。            如果实参的数量大于形参，多余实参将不会赋值，            如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined    - 返回值，就是函数执行的结果。        - 使用return 来设置函数的返回值。        - 语法：return 值;            - 该值就会成为函数的返回值，可以通过一个变量来接收返回值        - return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。        - return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。        - 如果return后不跟值，或者是不写return则函数默认返回undefined。        - break、continue和return            - break                - 退出循环            - continue                - 跳过当次循环            - return                - 退出函数                    - 参数，函数的实参也可以是任意的数据类型。    - 在调用函数时，浏览器每次都会传递进两个隐含的参数        1.函数的上下文对象this        2.封装实参的对象arguments            arguments是一个类数组对象，            在调用函数的时候，我们所传递的实参都会在arguments中保存            arguments.length可以用来获取实参的长度    - 方法（method）        - 可以将一个函数设置为一个对象的属性，            当一个对象的属性是一个函数时，                我们称这个函数是该对象的方法。        - 对象.方法名();        - 函数名();    - call()    - apply()        - 这两个方法都是函数对象的方法需要通过函数对象来调用        - 通过两个方法可以直接调用函数，并且可以通过第一个实参来指定函数中this        fun.call(obj)  执行的时候fun中的this就是obj，有点类似于obj.fun        - 不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递        call(obj,a,b)        apply([obj,a,b])    - arguments        - arguments和this类似，都是函数中的隐含的参数        - arguments是一个类数组元素，它用来封装函数执行过程中的实参            所以即使不定义形参，也可以通过arguments来使用实参        - arguments中有一个属性callee表示当前执行的函数对象            - this        - this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象            1.以函数的形式调用时，this是window            2.以方法的形式调用时，this是调用方法的对象            3.以构造函数的形式调用时，this是新建的那个对象            4.使用call和apply调用时，this是指定的那个对象            5.在全局作用域中this代表window</code></pre><h3 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">- 作用域简单来说就是一个变量的作用范围。<br>- 在<span class="hljs-variable constant_">JS</span>中作用域分成两种：<br><span class="hljs-number">1.</span>全局作用域<br>- 直接在script标签中编写的代码都运行在全局作用域中<br>- 全局作用域在打开页面时创建，在页面关闭时销毁。<br>- 全局作用域中有一个全局对象<span class="hljs-variable language_">window</span>，<span class="hljs-variable language_">window</span>对象由浏览器提供，<br>可以在页面中直接使用，它代表的是整个的浏览器的窗口。<br>- 在全局作用域中创建的变量都会作为<span class="hljs-variable language_">window</span>对象的属性保存<br>在全局作用域中创建的函数都会作为<span class="hljs-variable language_">window</span>对象的方法保存<br>- 在全局作用域中创建的变量和函数可以在页面的任意位置访问。<br>在函数作用域中也可以访问到全局作用域的变量。<br>- 尽量不要在全局中创建变量<br><br><span class="hljs-number">2.</span>函数作用域<br>- 函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。<br>- 函数作用域在函数执行时创建，在函数执行结束时销毁。<br>- 在函数作用域中创建的变量，不能在全局中访问。<br>- 当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，<br>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，<br>如果找到了则使用，找不到则继续向上找，一直会<br><br>- 变量的声明提前<br>- 在全局作用域中，使用<span class="hljs-keyword">var</span>关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。<br>所以我们可以在变量声明前使用变量。但是不使用<span class="hljs-keyword">var</span>关键字声明的变量不会被声明提前。<br>- 在函数作用域中，也具有该特性，使用<span class="hljs-keyword">var</span>关键字声明的变量会在函数所有的代码执行前被声明，<br>如果没有使用<span class="hljs-keyword">var</span>关键字声明变量，则变量会变成全局变量<br><br>- 函数的声明提前<br>- 在全局作用域中，使用函数声明创建的函数（<span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;&#125;）,会在所有的代码执行之前被创建，<br>也就是我们可以在函数声明前去调用函数，但是使用函数表达式(<span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;)创建的函数没有该特性<br>- 在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。<br><br>  <span class="hljs-number">3.</span><span class="hljs-variable language_">this</span>（上下文对象）<br> - 我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。<br>   使用<span class="hljs-variable language_">this</span>来引用上下文对象，根据函数的调用形式不同，<span class="hljs-variable language_">this</span>的值也不同。<br>   - <span class="hljs-variable language_">this</span>的不同的情况：<br>     <span class="hljs-number">1.</span>以函数的形式调用时，<span class="hljs-variable language_">this</span>是<span class="hljs-variable language_">window</span><br>     <span class="hljs-number">2.</span>以方法的形式调用时，<span class="hljs-variable language_">this</span>就是调用方法的对象<br>     <span class="hljs-number">3.</span>以构造函数的形式调用时，<span class="hljs-variable language_">this</span>就是新创建的对象<br></code></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">4.</span>构造函数<br>- 构造函数是专门用来创建对象的函数<br>- 一个构造函数我们也可以称为一个类<br>- 通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例<br>- 通过同一个构造函数创建的对象，我们称为一类对象<br>- 构造函数就是一个普通的函数，只是他的调用方式不同，<br>如果直接调用，它就是一个普通函数<br>如果使用<span class="hljs-keyword">new</span>来调用，则它就是一个构造函数<br>- 例子：<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;<br><br>- 构造函数的执行流程：<br><span class="hljs-number">1.</span>创建一个新的对象<br><span class="hljs-number">2.</span>将新的对象作为函数的上下文对象（<span class="hljs-variable language_">this</span>）<br><span class="hljs-number">3.</span>执行函数中的代码<br><span class="hljs-number">4.</span>将新建的对象返回<br><br>- <span class="hljs-keyword">instanceof</span> 用来检查一个对象是否是一个类的实例<br>- 语法：对象 <span class="hljs-keyword">instanceof</span> 构造函数<br>- 如果该对象时构造函数的实例，则返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span><br>- <span class="hljs-title class_">Object</span>是所有对象的祖先，所以任何对象和<span class="hljs-title class_">Object</span>做<span class="hljs-keyword">instanceof</span>都会返回<span class="hljs-literal">true</span><br><br>- 枚举对象中的属性<br><span class="hljs-keyword">for</span>...<span class="hljs-keyword">in</span><br>语法：<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> 属性名 <span class="hljs-keyword">in</span> 对象)&#123;<br><br>&#125;<br><br><span class="hljs-keyword">for</span>...<span class="hljs-keyword">in</span>语句的循环体会执行多次，对象中有几个属性就会执行几次，<br>每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性<br></code></pre></td></tr></table></figure><h3 id="4-原型（prototype）"><a href="#4-原型（prototype）" class="headerlink" title="4.原型（prototype）"></a>4.原型（prototype）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">- 创建一个函数以后，解析器都会默认在函数中添加一个属性prototype<br>prototype属性指向的是一个对象，这个对象我们称为原型对象。<br>- 当函数作为构造函数使用，它所创建的对象中都会有一个隐含的属性执行该原型对象。<br>这个隐含的属性可以通过对象.<span class="hljs-property">__proto__</span>来访问。<br>- 原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。<br>我们可以将对象中共有的属性和方法统一添加到原型对象中，<br>这样我们只需要添加一次，就可以使所有的对象都可以使用。<br>- 当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，<br>如果在自身中找到了，则直接使用。<br>如果没有找到，则去原型对象中寻找，如果找到了则使用，<br>如果没有找到，则去原型的原型中寻找，依此类推。直到找到<span class="hljs-title class_">Object</span>的原型为止，<span class="hljs-title class_">Object</span>的原型的原型为<span class="hljs-literal">null</span>，<br>如果依然没有找到则返回<span class="hljs-literal">undefined</span><br>- <span class="hljs-title function_">hasOwnProperty</span>()<br>- 这个方法可以用来检查对象自身中是否含有某个属性<br>- 语法：对象.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;属性名&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-数组（Array）"><a href="#5-数组（Array）" class="headerlink" title="5.数组（Array）"></a>5.数组（Array）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs js">- 数组也是一个对象，是一个用来存储数据的对象<br>和<span class="hljs-title class_">Object</span>类似，但是它的存储效率比普通对象要高<br>- 数组中保存的内容我们称为元素<br>- 数组使用索引（index）来操作元素<br>- 索引指由<span class="hljs-number">0</span>开始的整数<br>- 数组的操作：<br>- 创建数组<br>         <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>         <span class="hljs-keyword">var</span> arr = [];<br>- 向数组中添加元素<br>- 语法；<br>数组对象[索引] = 值;<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">123</span>;<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>- 创建数组时直接添加元素<br>- 语法：<br><span class="hljs-keyword">var</span> arr = [元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2.</span>...元素N];<br>- 例子：<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">123</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">null</span>];<br><br>- 获取和修改数组的长度<br>- 使用length属性来操作数组的长度<br>- 获取长度：<br>数组.<span class="hljs-property">length</span><br>- length获取到的是数组的最大索引+<span class="hljs-number">1</span><br>- 对于连续的数组，length获取到的就是数组中元素的个数<br>- 修改数组的长度<br>数组.<span class="hljs-property">length</span> = 新长度<br>- 如果修改后的length大于原长度，则多出的部分会空出来<br>- 如果修改后的length小于原长度，则原数组中多出的元素会被删除<br>- 向数组的最后添加元素<br>数组[数组.<span class="hljs-property">length</span>] = 值;<br><br>- 数组的方法<br>- <span class="hljs-title function_">push</span>()<br>- 用来向数组的末尾添加一个或多个元素，并返回数组新的长度<br>- 语法：数组.<span class="hljs-title function_">push</span>(元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素N)<br>- <span class="hljs-title function_">pop</span>()<br>- 用来删除数组的最后一个元素，并返回被删除的元素<br>- <span class="hljs-title function_">unshift</span>()<br>- 向数组的前边添加一个或多个元素，并返回数组的新的长度<br>- <span class="hljs-title function_">shift</span>()<br>- 删除数组的前边的一个元素，并返回被删除的元素<br>- <span class="hljs-title function_">slice</span>()<br>- 可以从一个数组中截取指定的元素<br>- 该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回<br>- 参数：<br><span class="hljs-number">1.</span>截取开始位置的索引（包括开始位置）<br><span class="hljs-number">2.</span>截取结束位置的索引（不包括结束位置）<br>- 第二个参数可以省略不写，如果不写则一直截取到最后<br>- 参数可以传递一个负值，如果是负值，则从后往前数<br>- <span class="hljs-title function_">splice</span>()<br>- 可以用来删除数组中指定元素，并使用新的元素替换<br>该方法会将删除的元素封装到新数组中返回<br>- 参数：<br><span class="hljs-number">1.</span>删除开始位置的索引<br><span class="hljs-number">2.</span>删除的个数<br><span class="hljs-number">3.</span>三个以后，都是替换的元素，这些元素将会插入到开始位置索引的前边<br><span class="hljs-title function_">reverse</span>()<br>- 可以用来反转一个数组，它会对原数组产生影响<br><span class="hljs-title function_">concat</span>()<br>- 可以连接两个或多个数组，它不会影响原数组，而是新数组作为返回值返回<br><span class="hljs-title function_">join</span>()<br>- 可以将一个数组转换为一个字符串<br>- 参数：<br>需要一个字符串作为参数，这个字符串将会作为连接符来连接数组中的元素<br>如果不指定连接符则默认使用,<br><span class="hljs-title function_">sort</span>()<br>- 可以对一个数组中的内容进行排序，默认是按照<span class="hljs-title class_">Unicode</span>编码进行排序<br>调用以后，会直接修改原数组。<br>- 可以自己指定排序的规则，需要一个回调函数作为参数：<br>返回一个大于<span class="hljs-number">0</span>的值，元素交换顺序<br>返回一个小于<span class="hljs-number">0</span>的值，元素位置不变<br>返回<span class="hljs-number">0</span>，则认为两个元素相等，不交换位置<br><span class="hljs-title class_">Arr</span>.<span class="hljs-title function_">sort</span>(  <span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span> <span class="hljs-keyword">return</span> a-b)   <span class="hljs-comment">//升序</span><br><span class="hljs-title class_">Arr</span>.<span class="hljs-title function_">sort</span>(  <span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span> <span class="hljs-keyword">return</span> b-a)   <span class="hljs-comment">//降序</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">- 遍历数组        - 遍历数组就是将数组中元素都获取到        - 一般情况我们都是使用for循环来遍历数组：            for(var i=0 ; i&lt;数组.length ; i++)&#123;                //数组[i]            &#125;- 使用forEach()方法来遍历数组（不兼容IE8）            数组.forEach(function(value , index , obj)&#123;                &#125;);                forEach()方法需要一个回调函数作为参数，            数组中有几个元素，回调函数就会被调用几次，            每次调用时，都会将遍历到的信息以实参的形式传递进来，            我们可以定义形参来获取这些信息。            value:正在遍历的元素            index:正在遍历元素的索引            obj:被遍历对象</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs JS">+属性<br><span class="hljs-title class_">Array</span>.<span class="hljs-property">length</span><br>    <span class="hljs-comment">//Array 构造函数的 length 属性，其值为1（注意该属性为静态属性，不是数组实例的 length 属性）。</span><br>    <span class="hljs-comment">//get Array[@@species]返回Array 构造函数。Array.prototype通过数组的原型对象可以为所有数组对象添加属性。</span><br>+方法<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>()从类数组对象或者可迭代对象中创建一个新的数组实例。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>()用来判断某个变量是否是一个数组对象。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>()根据一组参数来创建新的数组实例，支持任意的参数数量和类型。<br>        <br>所有数组实例都会从 <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> 继承属性和方法。修改 <span class="hljs-title class_">Array</span> 的原型会影响到所有的数组实例。<br>+实例属性<br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> 所有的数组实例都继承了这个属性，它的值就是<span class="hljs-title class_">Array</span>，表明了所有的数组都是由<span class="hljs-title class_">Array</span>构造出来的。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">length</span> 上面说了，因为<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> 也是个数组，所以它也有length属性，这个值为<span class="hljs-number">0</span>，因为它是个空数组。<br>+实例方法--修改器（这些方法会改变数组）<br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">copyWithin</span>()在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">fill</span>()将数组中指定区间的所有元素的值，都替换成某个固定的值。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">pop</span>()删除数组的最后一个元素，并返回这个元素。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">push</span>()在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">reverse</span>()颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">shift</span>()删除数组的第一个元素，并返回这个元素。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">sort</span>()对数组元素进行排序，并返回当前数组。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">splice</span>()在任意的位置给数组添加或删除任意个元素。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">unshift</span>()在数组的开头增加一个或多个元素，并返回数组的新长度。<br> +实例方法--访问方法（这些方法绝对不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。）<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">concat</span>()<br>    返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">includes</span>()<br>   判断当前数组是否包含某指定的值，如果是返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span><br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">join</span>()<br>    连接所有数组元素组成一个字符串<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">slice</span>()<br>    抽取当前数组中的一段元素组合成一个新数组<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">toSource</span>()<br>    返回一个字符串,代表该数组的源代码.<span class="hljs-title function_">toSource</span>()方法返回一个表示对象源代码的字符串。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">toString</span>()<br>    返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">toString</span>()<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">toLocaleString</span>()<br>    返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">toLocaleString</span>()<br>+ 迭代方法<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">entries</span>()返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">every</span>()如果数组中的每个元素都满足测试函数，则返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">some</span>()如果数组中至少有一个元素满足测试函数，则返回 <span class="hljs-literal">true</span>，否则返回 <span class="hljs-literal">false</span>。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">filter</span>()将所有在过滤函数中返回<span class="hljs-literal">true</span>的数组元素放进一个新数组中并返回。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">find</span>()找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回<span class="hljs-literal">undefined</span>。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">findIndex</span>()找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回-<span class="hljs-number">1</span>。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">keys</span>()返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">map</span>()返回一个由回调函数的返回值组成的新数组。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">reduce</span>()从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">reduceRight</span>()从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">values</span>()返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[@@iterator]()和上面的<span class="hljs-title function_">values</span>() 方法是同一个函数。<br></code></pre></td></tr></table></figure><h3 id="6-Date"><a href="#6-Date" class="headerlink" title="6.Date"></a><strong>6.Date</strong></h3><pre><code class="hljs">- 日期的对象，在JS中通过Date对象来表示一个时间- 创建对象    - 创建一个当前的时间对象        var d = new Date();    - 创建一个指定的时间对象           var d = new Date(&quot;月/日/年 时:分:秒&quot;);- 方法：    getDate()        - 当前日期对象是几日（1-31）            getDay()         - 返回当前日期对象时周几（0-6）            - 0 周日            - 1 周一 。。。                getMonth()        - 返回当前日期对象的月份（0-11）        - 0 一月 1 二月 。。。    getFullYear() 从 Date 对象以四位数字返回年份。     getHours() 返回 Date 对象的小时 (0 ~ 23)。     getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。     getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。     getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。         getTime()        - 返回当前日期对象的时间戳        - 时间戳，指的是从1970年月1日 0时0分0秒，到现在时间的毫秒数            计算机底层保存时间都是以时间戳的形式保存的。                Date.now()        - 可以获取当前代码执行时的时间戳</code></pre><h3 id="7-Math"><a href="#7-Math" class="headerlink" title="7.Math"></a>7.Math</h3><pre><code class="hljs">- Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法    我们可以直接使用它来进行数学运算相关的操作        <figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">--属性<br>Math.PI<br><span class="hljs-bullet">-</span> <span class="hljs-string">常量，圆周率</span><br>Math.E<br><span class="hljs-bullet">-</span> <span class="hljs-string">常量，e</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">方法：</span><br>Math.abs()<br><span class="hljs-bullet">-</span> <span class="hljs-string">绝对值运算</span><br>Math.ceil()<br><span class="hljs-bullet">-</span> <span class="hljs-string">向上取整</span><br>Math.floor()<br><span class="hljs-bullet">-</span> <span class="hljs-string">向下取整</span><br>Math.round()<br><span class="hljs-bullet">-</span> <span class="hljs-string">四舍五入取整</span><br>Math.random()<br><span class="hljs-bullet">-</span> <span class="hljs-string">生成一个0-1之间的随机数</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">生成一个x-y之间的随机数</span><br>Math.round(Math.random()*(y-x)+x);<br>Math.pow(x,y)<br><span class="hljs-bullet">-</span> <span class="hljs-string">求x的y次幂</span><br>Math.sqrt()<br><span class="hljs-bullet">-</span> <span class="hljs-string">对一个数进行开方</span><br>Math.max()<br><span class="hljs-bullet">-</span> <span class="hljs-string">求多个数中最大值</span><br>Math.min()<br><span class="hljs-bullet">-</span> <span class="hljs-string">求多个数中的最小值</span><br><br><br>​<br><br><span class="hljs-comment">### 8**字符串的相关的方法**</span><br><br>length<br><span class="hljs-bullet">-</span> <span class="hljs-string">获取字符串的长度</span><br>charAt()<br><span class="hljs-bullet">-</span> <span class="hljs-string">根据索引获取指定的字符</span><br>charCodeAt()<br><span class="hljs-bullet">-</span> <span class="hljs-string">根据索引获取指定的字符编码</span><br>String.fromCharCode()<br><span class="hljs-bullet">-</span> <span class="hljs-string">根据字符编码获取字符</span><br>indexOf()<br>lastIndexOf()<br><span class="hljs-bullet">-</span> <span class="hljs-string">从一个字符串中检索指定内容</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">需要一个字符串作为参数，这个字符串就是要检索的内容，</span><br>如果找到该内容，则会返回其第一次出现的索引，如果没有找到则返回-1。<br><span class="hljs-bullet">-</span> <span class="hljs-string">可以指定一个第二个参数，来表示开始查找的位置</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">indexOf()是从前向后找</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">lastIndexOf()是从后向前找</span><br>slice()<br><span class="hljs-bullet">-</span> <span class="hljs-string">可以从一个字符串中截取指定的内容，并将截取到内容返回，不会影响原变量</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">参数：</span><br>第一个：截取开始的位置（包括开始）<br>第二个：截取结束的位置（不包括结束）<br><span class="hljs-bullet">-</span> <span class="hljs-string">可以省略第二个参数，如果省略则一直截取到最后</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">可以传负数，如果是负数则从后往前数</span><br>substr()<br><span class="hljs-bullet">-</span> <span class="hljs-string">和slice()基本一致，不同的是它第二个参数不是索引，而是截取的数量</span><br><br>substring()<br><span class="hljs-bullet">-</span> <span class="hljs-string">和slice()基本一致，不同的是它不能接受负值作为参数，如果设置一个负值，则会自动修正为0，</span><br>substring()中如果第二个参数小于第一个，自动调整位置<br>toLowerCase() <br><span class="hljs-bullet">-</span> <span class="hljs-string">将字符串转换为小写并返回</span><br>toUpperCase() <br><span class="hljs-bullet">-</span> <span class="hljs-string">将字符串转换为大写并返回</span><br>split()<br><span class="hljs-bullet">-</span> <span class="hljs-string">可以根据指定内容将一个字符串拆分为一个数组</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">参数：</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">需要一个字符串作为参数，将会根据字符串去拆分数组</span><br>可以接收一个正则表达式，此时会根据正则表达式去拆分数组<br>             -这个方法即使不指定全局匹配，也会全都插分<br><br>match() <br><span class="hljs-bullet">-</span> <span class="hljs-string">可以将字符串中和正则表达式匹配的内容提取出来</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">参数：</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">正则表达式，可以根据该正则表达式将字符串中符合要求的内容提取出来</span><br>默认情况下 match只会找到第一个符合要求的内容，找到以后就停止检索<br>我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容<br>可以为一个正则表达式设置多个匹配模式，且顺序无所谓<br>match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果<br><br>replace()  <br><span class="hljs-bullet">-</span> <span class="hljs-string">可以将字符串中指定内容替换为新的内容</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">参数：</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">第一个：被替换的内容，可以是一个正则表达式</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">第二个：替换的新内容</span><br><br>search() <br><span class="hljs-bullet">-</span> <span class="hljs-string">可以根据正则表达式去字符串中查找指定的内容</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">参数：</span><br>正则表达式，将会根据该表达式查询内容，<br>并且将第一个匹配到的内容的索引返回，如果没有匹配到任何内容，则返回-1。<br>-serach()只会查找第一个，即使设置全局匹配也没用<br><br><span class="hljs-comment">### 9.包装类</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">在JS中为我们提供了三个包装类：</span><br>String() Boolean() Number()<br><span class="hljs-bullet">-</span> <span class="hljs-string">通过这三个包装类可以创建基本数据类型的对象</span><br>例子：<br>var num = new Number(2);<br>var str = new String(&quot;hello&quot;);<br>var bool = new Boolean(true);<br><span class="hljs-bullet">-</span> <span class="hljs-string">但是在实际应用中千万不要这么干。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">当我们去操作一个基本数据类型的属性和方法时，</span><br>解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，<br>操作完成以后再将这个临时对象进行销毁。<br><br><span class="hljs-comment">### 10.正则表达式</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，</span><br>也可以将一个字符串中符合规则的内容提取出来。<br><span class="hljs-bullet">-</span> <span class="hljs-string">创建正则表达式</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">var reg = new RegExp(&quot;正则&quot;,&quot;匹配模式&quot;);</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">var reg = /正则表达式/匹配模式</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">语法：</span><br>匹配模式：<br>i:忽略大小写<br>g:全局匹配模式<br><span class="hljs-bullet">-</span> <span class="hljs-string">设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求</span><br><br><span class="hljs-attribute">正则语法</span><br><span class="hljs-attribute">| 或</span><br><span class="hljs-attribute">[] 或</span><br><span class="hljs-attribute">[^ ] 除了</span><br><span class="hljs-attribute">[a-z] 小写字母</span><br><span class="hljs-attribute">[A-Z] 大写字母</span><br><span class="hljs-attribute">[A-z] 任意字母</span><br><span class="hljs-attribute">[0-9] 任意数字</span><br><span class="hljs-attribute">- 量词</span><br><span class="hljs-attribute">&#123;n&#125; 正好n次</span><br><span class="hljs-attribute">&#123;m,n&#125; m-n次</span><br><span class="hljs-attribute">&#123;m,&#125; 至少m次</span><br><span class="hljs-attribute">+至少1次 &#123;1,&#125;</span><br><span class="hljs-attribute">?   0次或1次 &#123;0,1&#125;</span><br><span class="hljs-attribute">*   0次或多次 &#123;0,&#125;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">- 转义字符</span><br><span class="hljs-attribute">\ 在正则表达式中使用\作为转义字符</span><br><span class="hljs-attribute">\. 表示.</span><br><span class="hljs-attribute">. 表示任意字符</span><br><span class="hljs-attribute">\\ 表示 \</span><br><span class="hljs-attribute">\w   - 相当于[A-z0-9_]</span><br><span class="hljs-attribute">\W- 相当于[^A-z0-9_]</span><br><span class="hljs-attribute">\d- 任意数字</span><br><span class="hljs-attribute">\D- 除了数字</span><br><span class="hljs-attribute">\s- 空格</span><br><span class="hljs-attribute">\S- 除了空格</span><br><span class="hljs-attribute">\b- 单词边界</span><br><span class="hljs-attribute">\B- 除了单词边界</span><br><span class="hljs-attribute">^ 表示开始</span><br><span class="hljs-attribute">$ 表示结束</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">​</span><br><span class="hljs-attribute">​</span><br><span class="hljs-attribute">​</span><br><span class="hljs-attribute">​- 方法：</span><br><span class="hljs-attribute">​RegExp.test(string)</span><br><span class="hljs-attribute">​- 可以用来检查一个字符串是否符合正则表达式</span><br><span class="hljs-attribute">​- 如果符合返回true，否则返回false</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">## JavaScript DOM</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">### 1.DOM概念</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">- Document Object Model</span><br><span class="hljs-attribute">- 文档对象模型，通过DOM可以来任意来修改网页中各个内容</span><br><span class="hljs-attribute">- 文档</span><br><span class="hljs-attribute">- 文档指的是网页，一个网页就是一个文档</span><br><span class="hljs-attribute">- 对象</span><br><span class="hljs-attribute">- 对象指将网页中的每一个节点都转换为对象</span><br><span class="hljs-attribute">转换完对象以后，就可以以一种纯面向对象的形式来操作网页了</span><br><span class="hljs-attribute">- 模型</span><br><span class="hljs-attribute">- 模型用来表示节点和节点之间的关系，方便操作页面</span><br><span class="hljs-attribute">- 节点（Node）</span><br><span class="hljs-attribute">- 节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点</span><br><span class="hljs-attribute">- 虽然都是节点，但是节点的类型却是不同的</span><br><span class="hljs-attribute">- 常用的节点</span><br><span class="hljs-attribute">- 文档节点 （Document），代表整个网页</span><br><span class="hljs-attribute">- 元素节点（Element），代表网页中的标签</span><br><span class="hljs-attribute">- 属性节点（Attribute），代表标签中的属性</span><br><span class="hljs-attribute">- 文本节点（Text），代表网页中的文本内容</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">### 2.DOM操作</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">- DOM查询</span><br><span class="hljs-attribute">- 在网页中浏览器已经为我们提供了document对象，</span><br><span class="hljs-attribute">它代表的是整个网页，它是window对象的属性，可以在页面中直接使用。</span><br><span class="hljs-attribute">- document查询方法：</span><br><span class="hljs-attribute">- 根据元素的id属性查询一个元素节点对象：</span><br><span class="hljs-attribute">- document.getElementById(&quot;id属性值&quot;);</span><br><span class="hljs-attribute">- 根据元素的name属性值查询一组元素节点对象</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">document.getElementsByName(&quot;name属性值&quot;);</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">根据标签名来查询一组元素节点对象：</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">document.getElementsByTagName(&quot;标签名&quot;);</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素的属性：</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">读取元素的属性：</span><br>语法：元素.属性名<br>例子：ele.name  <br>  ele.id  <br>  ele.value <br>  ele.className<br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">修改元素的属性：</span><br>语法：元素.属性名 = 属性值<br><br><span class="hljs-bullet">-</span> <span class="hljs-string">innerHTML</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">使用该属性可以获取或设置元素内部的HTML代码</span><br><br><span class="hljs-comment">### 3.文档的加载</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">浏览器在加载一个页面时，是按照自上向下的顺序加载的，加载一行执行一行。</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">如果将js代码编写到页面的上边，当代码执行时，页面中的DOM对象还没有加载，</span><br>此时将会无法正常获取到DOM对象，导致DOM操作失败。<br><span class="hljs-bullet">-</span> <span class="hljs-string">解决方式一：</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">可以将js代码编写到body的下边</span><br>&lt;body&gt;<br>&lt;button id=&quot;btn&quot;&gt;按钮&lt;/button&gt;<br>&lt;script&gt;<br>var btn = document.getElementById(&quot;btn&quot;);<br>btn.onclick = function()&#123;<br><br>&#125;;<br>&lt;/script&gt;<br>&lt;/body&gt;<br><br><span class="hljs-bullet">-</span> <span class="hljs-string">解决方式二：</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">将js代码编写到window.onload = function()&#123;&#125;中</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">window.onload 对应的回调函数会在整个页面加载完毕以后才执行，</span><br>所以可以确保代码执行时，DOM对象已经加载完毕了<br>&lt;script&gt;<br>window.onload = function()&#123;<br>var btn = document.getElementById(&quot;btn&quot;);<br>btn.onclick = function()&#123;<br><br>&#125;;<br>&#125;;<br><br>&lt;/script&gt;<br><br><span class="hljs-comment">### 4.DOM查询</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">通过具体的元素节点来查询</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.getElementsByTagName()</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">通过标签名查询当前元素的指定后代元素</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.childNodes</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的所有子节点</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">会获取到空白的文本子节点</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.children</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的所有子元素</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.firstChild(包含空白文本节点)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的第一个子节点</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.lastChild(包含空白文本节点)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的最后一个子节点</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.firstElementChild(不包含空白文本节点)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的第一个子节点</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.lastElementChild(包含空白文本节点)</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的最后一个子节点</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.parentNode</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的父元素</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.previousSibling</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的前一个兄弟节点</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">元素.nextSibling</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">获取当前元素的后一个兄弟节点</span><br><br><br>​<br><br>innerHTML和innerText<br><span class="hljs-bullet">-</span> <span class="hljs-string">这两个属性并没有在DOM标准定义，但是大部分浏览器都支持这两个属性</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">两个属性作用类似，都可以获取到标签内部的内容，</span><br>不同是innerHTML会获取到html标签，而innerText会自动去除标签<br><span class="hljs-bullet">-</span> <span class="hljs-string">如果使用这两个属性来设置标签内部的内容时，没有任何区别的</span><br><br>读取标签内部的文本内容<br>&lt;h1&gt;h1中的文本内容&lt;/h1&gt;<br>元素.firstChild.nodeValue<br><br><br></code></pre></td></tr></table></figure></code></pre><ul><li>document对象的其他的属性和方法<br>  document.all<br>  - 获取页面中的所有元素，相当于document.getElementsByTagName(“*”);<br><br>  document.documentElement<br>  - 获取页面中html根元素<br><br>  document.body<br>  - 获取页面中的body元素<br><br>  document.getElementsByClassName()<br>  - 根据元素的class属性值查询一组元素节点对象<br>  - 这个方法不支持IE8及以下的浏览器<br><br>  document.querySelector()<br>  - 根据CSS选择器去页面中查询一个元素<br>  - 如果匹配到的元素有多个，则它会返回查询到的第一个元素<br><br>  document.querySelectorAll()<br>  - 根据CSS选择器去页面中查询一组元素<br>  - 会将匹配到所有元素封装到一个数组中返回，即使只匹配到一个</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br><span class="hljs-comment">### 5.DOM修改</span><br><br>document.createElement()<br><span class="hljs-bullet">-</span> <span class="hljs-string">可以根据标签名创建一个元素节点对象</span><br><br>document.createTextNode()<br><span class="hljs-bullet">-</span> <span class="hljs-string">可以根据文本内容创建一个文本节点对象</span><br><br>父节点.appendChild(子节点)<br><span class="hljs-bullet">-</span> <span class="hljs-string">向父节点中添加指定的子节点</span><br><br>父节点.insertBefore(新节点,旧节点)<br><span class="hljs-bullet">-</span> <span class="hljs-string">将一个新的节点插入到旧节点的前边</span><br><br>父节点.replaceChild(新节点,旧节点)<br><span class="hljs-bullet">-</span> <span class="hljs-string">使用一个新的节点去替换旧节点</span><br><br>父节点.removeChild(子节点)<br><span class="hljs-bullet">-</span> <span class="hljs-string">删除指定的子节点</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">推荐方式：子节点.parentNode.removeChild(子节点)</span><br><br><span class="hljs-comment">### 6.通过DOM操作CSS</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">- 读取和修改内联样式    - 使用style属性来操作元素的内联样式    - 读取内联样式：        语法：元素.style.样式名        - 例子：            元素.style.width            元素.style.height            - 注意：如果样式名中带有-，则需要将样式名修改为驼峰命名法                将-去掉，然后-后的字母改大写            - 比如：background-color --&gt; backgroundColor                    border-width ---&gt; borderWidth                        - 修改内联样式：        语法：元素.style.样式名 = 样式值        - 通过style修改的样式都是内联样式，由于内联样式的优先级比较高，            所以我们通过JS来修改的样式，往往会立即生效，            但是如果样式中设置了!important，则内联样式将不会生效。            - 读取元素的当前样式    - 正常浏览器        - 使用getComputedStyle()        - 这个方法是window对象的方法，可以返回一个对象，这个对象中保存着当前元素生效样式        - 参数：            1.要获取样式的元素            2.可以传递一个伪元素，一般传null        - 例子：            获取元素的宽度                getComputedStyle(box , null)[&quot;width&quot;];        - 通过该方法读取到样式都是只读的不能修改    - IE8        - 使用currentStyle        - 语法：            元素.currentStyle.样式名        - 例子：            box.currentStyle[&quot;width&quot;]        - 通过这个属性读取到的样式是只读的不能修改- 其他的样式相关的属性    注意：以下样式都是只读的    clientHeight        - 元素的可见高度，指元素的内容区和内边距的高度    clientWidth        - 元素的可见宽度，指元素的内容区和内边距的宽度    offsetHeight        - 整个元素的高度，包括内容区、内边距、边框    offfsetWidth        - 整个元素的宽度，包括内容区、内边距、边框    offsetParent        - 当前元素的定位父元素        - 离他最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body    offsetLeft    offsetTop        - 当前元素和定位父元素之间的偏移量        - offsetLeft水平偏移量  offsetTop垂直偏移量        scrollHeight    scrollWidth        - 获取元素滚动区域的高度和宽度        scrollTop    scrollLeft        - 获取元素垂直和水平滚动条滚动的距离            判断滚动条是否滚动到底        - 垂直滚动条            scrollHeight - scrollTop = clientHeight                    - 水平滚动            scrollWidth - scrollLeft = clientWidth</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>## JavaScript 事件<br><br>### 1.事件定义<br><br>- 事件（Event）<br>- 事件指的是用户和浏览器之间的交互行为。比如：点击按钮、关闭窗口、鼠标移动。。。<br>- 我们可以为事件来绑定回调函数来响应事件。<br>- 绑定事件的方式：<br>1.可以在标签的事件属性中设置相应的JS代码<br>例子：<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;js代码。。。&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>2.可以通过为对象的指定事件属性设置回调函数的形式来处理事件<br>例子：<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="language-javascript">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;....</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>### 2.事件冒泡<br><br>```- 事件的冒泡（Bubble）<br>- 事件的冒泡指的是事件向上传导，当后代元素上的事件被触发时，将会导致其祖先元素上的同类事件也会触发。<br>- 事件的冒泡大部分情况下都是有益的，如果需要取消冒泡，则需要使用事件对象来取消<br>- 可以将事件对象的cancelBubble设置为true，即可取消冒泡<br>- 例子：<br>元素.事件 = function(event)&#123;<br>event = event || window.event;<br>event.cancelBubble = true;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-事件委派"><a href="#3-事件委派" class="headerlink" title="3.事件委派"></a>3.事件委派</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">事件的委派<br>- 指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素<br>从而通过祖先元素的响应函数来处理事件。<br>- 事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能<br>    - event中的target表示的触发事件的对象   <br></code></pre></td></tr></table></figure><h3 id="4-事件绑定"><a href="#4-事件绑定" class="headerlink" title="4.事件绑定"></a>4.事件绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html">/*<br>* 使用 对象.事件 = 函数 的形式绑定响应函数，<br>* 它只能同时为一个元素的一个事件绑定一个响应函数，<br>* 不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的<br>*/<br><br>* addEventListener()<br>* - 通过这个方法也可以为元素绑定响应函数<br>*  - 参数：<br>* 1.事件的字符串，不要on<br>* 2.回调函数，当事件触发时该函数会被调用<br>* 3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false<br>* <br>* 使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，<br>* 这样当事件被触发时，响应函数将会按照函数的绑定顺序执行<br><br><br><br>* attachEvent()<br>* - 在IE8中可以使用attachEvent()来绑定事件<br>*  - 参数：<br>* 1.事件的字符串，要on<br>* 2.回调函数<br>* <br>*  - 这个方法也可以同时为一个事件绑定多个处理函数，<br>* 不同的是它是后绑定先执行，执行顺序和addEventListener()相反<br>*/<br></code></pre></td></tr></table></figure><h3 id="5-事件的传播"><a href="#5-事件的传播" class="headerlink" title="5.事件的传播"></a>5.事件的传播</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">事件的传播<br>- 关于事件的传播网景公司和微软公司有不同的理解<br>- 微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，<br>然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。<br> - 网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，<br>然后在向内传播给后代元素<br>- W3C综合了两个公司的方案，将事件传播分成了三个阶段<br>1.捕获阶段<br>- 在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件<br>2.目标阶段<br>- 事件捕获到目标元素，捕获结束开始在目标元素上触发事件<br>3.冒泡阶段<br>- 事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件<br><br>- 如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true<br>一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false<br><br>- IE8及以下的浏览器中没有捕获阶段<br><br></code></pre></td></tr></table></figure><h2 id="JavaScript-BOM"><a href="#JavaScript-BOM" class="headerlink" title="JavaScript BOM"></a>JavaScript BOM</h2><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html">BOM<br>- 浏览器对象模型<br>- BOM可以使我们通过JS来操作浏览器<br>- 在BOM中为我们提供了一组对象，用来完成对浏览器的操作<br>- BOM对象<br>Window<br>- 代表的是整个浏览器的窗口，同时window也是网页中的全局对象<br>Navigator<br>- 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br>Location<br>- 代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面<br>History<br>- 代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录<br>由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页<br>而且该操作只在当次访问时有效<br>Screen<br>- 代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息<br><br><br>这些BOM对象在浏览器中都是作为window对象的属性保存的，<br>可以通过window对象来使用，也可以直接使用<br>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基本对象</tag>
      
      <tag>事件</tag>
      
      <tag>DOM</tag>
      
      <tag>BOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/31/hello-world/"/>
    <url>/2022/08/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
